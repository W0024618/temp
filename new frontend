C:\Users\W0024618\Desktop\Backend\src\services\excelService.js

const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
 const pLimit = require("p-limit");
 const { pingHost } = require("./pingService");
 
const { DateTime } = require("luxon");
const { all } = require("axios");
 
// Excel paths
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");
const pcDetailsPath = path.join(__dirname, "../data/PCDetails.xlsx");

const DBDetails = path.join(__dirname, "../data/DBDetails.xlsx");

 
// In‑memory cache
let allData = {};
 
// Helper: prune old entries
function pruneOldEntries(entries, days = 30) {
  const cutoff = DateTime.now().minus({ days }).toMillis();
  return entries.filter(e => DateTime.fromISO(e.timestamp).toMillis() >= cutoff);
}
 
// Load Excel sheets once
function loadExcelData() {
  if (Object.keys(allData).length) return;
  const loadSheet = file => {
    const wb = xlsx.readFile(file);
    const rows = xlsx.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);
    return rows.map(r => {
      const norm = {};
      Object.entries(r).forEach(([k, v]) => {
        norm[k.trim().toLowerCase().replace(/\s+/g, "_")] = v;
      });
      norm.history = [];
      return norm;
    });
  };
  allData = {
    archivers: loadSheet(archiverPath),
    controllers: loadSheet(controllerPath),
    cameras: loadSheet(cameraPath),
    servers: loadSheet(serverPath),
    pcDetails:loadSheet(pcDetailsPath),
    DBDetails:loadSheet(DBDetails),
  };
  console.log("Excel Data Loaded:", Object.keys(allData));
}
loadExcelData();
 
// Build IP→region map
const ipRegionMap = {};
Object.values(allData).flat().forEach(dev => {
  if (dev.ip_address && dev.location) {
    ipRegionMap[dev.ip_address] = dev.location.toLowerCase();
  }
});
 
// Fetch all IPs
function fetchAllIpAddress() {
  return Object.values(allData)
    .flat()
    .map(d => d.ip_address)
    .filter(Boolean);
}
 
// Ping helpers
 const cache = new Map();
 async function pingDevice(ip) {
    if (!ip) return "IP Address Missing";
     return await pingHost(ip);
   }
 
 cache.clear();
 
 async function pingDevices(devices) {
   //cache.clear();
    const limit = pLimit(20);
    await Promise.all(
      devices.map(dev =>
        limit(async () => {
          const status = cache.get(dev.ip_address) || await pingDevice(dev.ip_address);
          cache.set(dev.ip_address, status);
          dev.status = status;
        })
      )
    );
  }
 
 
// Summary calculators
function calculateSummary(groups) {
  const summary = {};
  for (const [k, list] of Object.entries(groups)) {
    const total = list.length;
    const online = list.filter(d => d.status === "Online").length;
    summary[k] = { total, online, offline: total - online };
  }
  return {
    totalDevices: Object.values(summary).reduce((s, g) => s + g.total, 0),
    totalOnlineDevices: Object.values(summary).reduce((s, g) => s + g.online, 0),
    totalOfflineDevices: Object.values(summary).reduce((s, g) => s + g.offline, 0),
    ...summary
  };
}
 
// Public APIs
async function fetchGlobalData() {
  const all = [...allData.cameras, ...allData.archivers, ...allData.controllers, ...allData.servers, ...allData.pcDetails, ...allData.DBDetails];
  await pingDevices(all);
  return { summary: calculateSummary(allData), details: allData };
}
 
async function fetchRegionData(regionName) {
  const filter = list => list.filter(d => d.location?.toLowerCase() === regionName.toLowerCase());
  const regionDevices = {
    cameras: filter(allData.cameras),
    archivers: filter(allData.archivers),
    controllers: filter(allData.controllers),
    servers: filter(allData.servers),
    pcDetails:filter(allData.pcDetails),
    DBDetails:filter(allData.DBDetails),
  };
  await pingDevices([].concat(...Object.values(regionDevices)));
  return { summary: calculateSummary(regionDevices), details: regionDevices };
}


function getDeviceInfo(ip) {
  for (const list of Object.values(allData)) {
    const dev = list.find(d => d.ip_address === ip);
    if (dev) return dev;
  }
  return null;
}



 
module.exports = {
  fetchGlobalData,
  fetchRegionData,
  fetchAllIpAddress,
  ipRegionMap,
  getDeviceInfo,       // ← new

};
 







C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\index.html


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Device Dashboard</title>


    <!-- >>>>>>>>>>>>>>>>>>>> -->
    <!-- <link rel="icon" type="image/png" href="images/favicon-96x96.png"/> -->

    <!-- >>>>>>>>>>>>>>>>>>>> -->
    <link rel="icon" href="images/favicon.png" sizes="32x32" type="images/png">

    <link rel="stylesheet" href="styles.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">


    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">

    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

</head>

<body>

    <button id="scrollToTopBtn" title="Go to top">
        <i class="bi bi-chevron-double-up"></i>
    </button>


    <div id="region-title" class="dashboard-header">

        <div class="region-logo">

        </div>
    </div>

    <div class="container">
        <!-- Sidebar -->
        <aside id="sidebar">
            <!-- <h2><i class="fas fa-globe"></i></h2> -->
            <button class="region-button" data-region="global"><i class="fas fa-globe"></i> Global</button>
            <button class="region-button" data-region="apac"><i class="fas fa-map-marker-alt"></i> APAC</button>
            <button class="region-button" data-region="emea"><i class="fas fa-map-marker-alt"></i> EMEA</button>
            <button class="region-button" data-region="laca"><i class="fas fa-map-marker-alt"></i> LACA</button>
            <button class="region-button" data-region="namer"><i class="fas fa-map-marker-alt"></i> NAMER</button>

            <button class="nav-button" onclick="location.href='trend.html'"><i class="fas fa-chart-line"></i> View Trend
                Analysis</button>
            <button class="nav-button" onclick="location.href='summary.html'"><i class="fas fa-table"></i> View Devices
                Summary</button>

            <div id="countdown" class="countdown-timer">Loading Timer...</div>

            <div class="filter-buttons">
                <button id="filter-all" class="status-filter active" data-status="all"><i
                        class="fas fa-layer-group"></i> All Devices</button>
                <button id="filter-online" class="status-filter" data-status="online"><i class="fas fa-wifi"></i> Online
                    Devices</button>
                <button id="filter-offline" class="status-filter" data-status="offline"><i
                        class="fas fa-plug-circle-xmark"></i> Offline Devices</button>
            </div>

            <label for="device-filter">Filter by Device Type:</label>
            <select id="device-filter">
                <option value="all">All</option>
                <option value="cameras">Cameras</option>
                <option value="archivers">Archivers</option>
                <option value="controllers">Controllers</option>
                <option value="servers">CCURE</option>
                <option value="pcdetails">Desktop Details</option>
                <option value="dbdetails">DB Server</option>
            </select>

            

           


            <label for="vendorFilter" id="vendorFilterLabel">Filter by Camera:</label>
            <select id="vendorFilter">
                <option value="all">All camera</option>
            </select>

            <label for="city-filter">Filter by Location:</label>
            <select id="city-filter">
                <option value="all">All Cities</option>
            </select>

        </aside>


        <!-- Main Content -->
        <main id="content">


            <div class="summary">
                <div class="card">

                    <h3><i class="fas fa-microchip icon-3d"></i> Total Devices</h3>
                    <div class="card-status total">Total <span id="total-devices">0</span></div>
                    <div class="card-status online">Online <span id="online-devices">0</span></div>
                    <div class="card-status offline">Offline <span id="offline-devices">0</span></div>
                </div>

                <div class="card">
                    <h3><i class="fas fa-video icon-3d"></i> Cameras</h3>
                    <div class="card-status total">Total <span id="camera-total">0</span></div>
                    <div class="card-status online">Online <span id="camera-online">0</span></div>
                    <div class="card-status offline">Offline <span id="camera-offline">0</span></div>
                </div>



                <div class="card">
                    <h3><i class="fas fa-database icon-3d"></i> Archivers</h3>

                    <div class="card-status total">Total <span id="archiver-total">0</span></div>
                    <div class="card-status online">Online <span id="archiver-online">0</span></div>
                    <div class="card-status offline">Offline <span id="archiver-offline">0</span></div>
                </div>

                <div class="card">
                    <h3><i class="fas fa-id-card icon-3d"></i> Controllers</h3>
                    <div class="card-status total">Total <span id="controller-total">0</span></div>
                    <div class="card-status online">Online <span id="controller-online">0</span></div>
                    <div class="card-status offline">Offline <span id="controller-offline">0</span></div>
                </div>

                <div class="card">
                    <h3><i class="fas fa-server icon-3d"></i>CCURE</h3>
                    <div class="card-status total">Total <span id="server-total">0</span></div>
                    <div class="card-status online">Online <span id="server-online">0</span></div>
                    <div class="card-status offline">Offline <span id="server-offline">0</span></div>
                </div>




                <div class="card">
                    <h3><i class="fas fa-desktop icon-3d"></i>Desktop</h3>
                    <div class="card-status total">Total <span id="pc-total">0</span></div>
                    <div class="card-status online">Online <span id="pc-online">0</span></div>
                    <div class="card-status offline">Offline <span id="pc-offline">0</span></div>
                </div>

                <div class="card">
                    <h3><i class="fa-etch fa-solid fa-database icon-3d"></i>DB Server</h3>
                    <div class="card-status total">Total <span id="db-total">0</span></div>
                    <div class="card-status online">Online <span id="db-online">0</span></div>
                    <div class="card-status offline">Offline <span id="db-offline">0</span></div>
                </div>



            </div>

            <!-- <hr class="section-divider"> -->


            <!-- Device Details -->
            <section id="details-section" class="details-section">
                <div class="details-header">
                    <h2><i class="fas fa-microchip"></i> Device Details</h2>
                    <input type="text" id="device-search" placeholder="🔍 Search by IP, Location, City..." />
                </div>

                <div id="device-details" class="device-grid">Loading...</div>
                <div id="details-container" class="device-grid"></div>
            </section>

        </main>
    </div>


    <!-- Modal -->
    <div id="modal">
        <div class="modal-content">
            <span id="close-modal">&times;</span>
            <h3 id="modal-title">Device Details</h3>
            <ul id="modal-body"></ul>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <p>
            <img src="images/new-header.png" alt="Company Logo" class="footer-logo" />
        </p>

        <p style="color: #fff;">&copy; 2025 VisionWatch | Powered by <strong style="color: #ffcc00;">Western Union
                Services India Pvt Ltd.</strong></p>
        <p style="color: #fff;">Contact:
            <a href="mailto:gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com">Email</a> |
            <a href="tel:+912067632394">+91 20 67632394</a>
        </p>
    </footer>

    <script src="script.js"></script>
</body>

</html>









C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\script.js

// C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\script.js
const baseUrl = "http://localhost:80/api/regions";
let refreshInterval = 300000; // 5 minutes
let pingInterval = 60000; // 30 seconds
let countdownTime = refreshInterval / 1000; // Convert to seconds
let currentRegion = "global";
let deviceDetailsCache = {}; // Store previous details to prevent redundant updates
let latestDetails = null; // Cache the latest fetched details

document.addEventListener("DOMContentLoaded", () => {
    fetchData("global"); // Load initial data
    startAutoRefresh("global");

    document.querySelectorAll(".region-button").forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            switchRegion(region);
        });
    });

    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });




    // ---------------------------
    // NEW: Summary card click/dblclick filter behavior
    // Single click: set device-filter to that type and trigger change (show only that type)
    // Double click: set device-filter to 'all' and trigger change (show all)
    // ---------------------------

    (function attachSummaryCardFilterHandlers() {
        const summaryCards = document.querySelectorAll(".summary .card");
        if (!summaryCards || summaryCards.length === 0) return;

        // helper: derive deviceFilter value from card title text
        function mapCardTitleToFilterValue(title) {
            if (!title) return "all";
            const t = title.toLowerCase();

            if (t.includes("camera")) return "cameras";
            if (t.includes("archiver")) return "archivers";
            if (t.includes("controller")) return "controllers";
            if (t.includes("ccure")) return "servers";       // CCURE servers
            if (t.includes("db")) return "dbdetails";        // DB servers
            if (t.includes("desktop")) return "pcdetails";
            if (t.includes("total")) return "all";

            return "all";
        }


        summaryCards.forEach((card) => {
            // make interactive
            card.style.cursor = "pointer";

            let clickTimer = null;
            const clickDelay = 100; // ms


            card.addEventListener("click", (ev) => {
                if (clickTimer) clearTimeout(clickTimer);
                clickTimer = setTimeout(() => {
                    const h3 = card.querySelector("h3");
                    const titleText = h3 ? h3.innerText.trim() : card.innerText.trim();
                    const filterValue = mapCardTitleToFilterValue(titleText);

                    const deviceFilterElem = document.getElementById("device-filter");
                    if (!deviceFilterElem) return;

                    deviceFilterElem.value = filterValue;
                    deviceFilterElem.dispatchEvent(new Event("change", { bubbles: true }));

                    // 🔥 Highlight clicked card, remove from others
                    document.querySelectorAll(".summary .card").forEach(c => c.classList.remove("active"));
                    if (filterValue !== "all") {
                        card.classList.add("active");
                    }
                }, clickDelay);
            });

            card.addEventListener("dblclick", (ev) => {
                if (clickTimer) {
                    clearTimeout(clickTimer);
                    clickTimer = null;
                }
                const deviceFilterElem = document.getElementById("device-filter");
                if (!deviceFilterElem) return;

                deviceFilterElem.value = "all";
                deviceFilterElem.dispatchEvent(new Event("change", { bubbles: true }));

                // 🔥 Remove all highlights on double-click (reset)
                document.querySelectorAll(".summary .card").forEach(c => c.classList.remove("active"));
            });


        });
    })();



});

// // --- Camera URL auto-detect helpers ---

function buildUrlFromHints(ip, cameraname = "", hyperlink = "") {
    ip = (ip || "").trim();
    hyperlink = (hyperlink || "").trim();

    // 🔑 Always prefer Excel's hyperlink if present
    if (hyperlink && /^https?:\/\//.test(hyperlink)) {
        return hyperlink;
    }

    // Direct IP
    if (/^\d{1,3}(\.\d{1,3}){3}$/.test(ip)) {
        return `http://${ip}`;
    }

    // Brand-based fallback
    const name = (cameraname || "").toLowerCase();
    if (/\bverkada\b/.test(name)) return `https://${ip}/#/login`;
    if (/\bflir\b/.test(name)) return `http://${ip}/control/userimage.html`;
    if (/\bhoneywell\b/.test(name)) return `http://${ip}/www/index.html`;
    if (/axis/.test(name)) return `http://${ip}/view/view.shtml`;

    return `http://${ip}`;
}

function openCamera(ip, name, hyperlink = "") {
    const url = buildUrlFromHints(ip, name, hyperlink);
    console.log("Opening URL:", url);  // Debug
    window.open(url, "_blank", "noopener");
}





function switchRegion(region) {
    clearExistingIntervals(); // Avoid interval duplication
    currentRegion = region;
    deviceDetailsCache = {};
    fetchData(region);
    startAutoRefresh(region);
}

// **Auto-refresh mechanism**
function startAutoRefresh(regionName) {
    fetchData(regionName); // Fetch initial data

    clearExistingIntervals();

    // Start countdown timer
    window.countdownTimer = setInterval(() => {
        document.getElementById("countdown").innerText = `Refreshing in ${countdownTime} seconds`;
        countdownTime--;
        if (countdownTime < 0) countdownTime = refreshInterval / 1000;
    }, 1000);

    // Refresh summary & details every 5 minutes
    window.refreshTimer = setInterval(() => {
        fetchData(regionName);
        countdownTime = refreshInterval / 1000;
    }, refreshInterval);

    // Ping devices every 30 seconds using history API
    window.pingTimer = setInterval(() => {
        pingAllDevices(regionName);
    }, pingInterval);
}

function clearExistingIntervals() {
    clearInterval(window.countdownTimer);
    clearInterval(window.refreshTimer);
    clearInterval(window.pingTimer);
}

// **Fetch summary and details together**
function fetchData(regionName) {
    Promise.all([
        fetch(`${baseUrl}/summary/${regionName}`).then(res => res.json()),
        fetch(`${baseUrl}/details/${regionName}`).then(res => res.json())
    ])
        .then(([summary, details]) => {
            console.log("Summary Data:", summary);
            console.log("Details Data:", details);

            updateSummary(summary);

            if (JSON.stringify(details) !== JSON.stringify(deviceDetailsCache)) {
                updateDetails(details);
                deviceDetailsCache = details; // Update cache
            }
            // Cache details for pinging
            latestDetails = details;
        })
        .catch((error) => console.error("Error fetching data:", error));
}

/*
   Updated pingAllDevices:
   Instead of calling a non-existent ping endpoint, we now use the history API to fetch 
   device history and update each device’s status by updating the separate status dot and text.
*/

function copyToClipboard(text) {
    if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text)
            .then(() => {
                alert("IP copied: " + text);
            })
            .catch(err => {
                console.error("Clipboard API failed", err);
                fallbackCopyTextToClipboard(text);
            });
    } else {
        fallbackCopyTextToClipboard(text);
    }
}

function fallbackCopyTextToClipboard(text) {
    // Create a temporary textarea
    const textArea = document.createElement("textarea");
    textArea.value = text;
    // Prevent scrolling to bottom
    textArea.style.position = "fixed";
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.opacity = "0";

    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
        const successful = document.execCommand("copy");
        if (successful) {
            alert("IP copied (fallback): " + text);
        } else {
            alert("Fallback copy failed");
        }
    } catch (err) {
        console.error("Fallback copy failed", err);
        alert("Unable to copy");
    }

    document.body.removeChild(textArea);
}

function pingAllDevices(regionName) {
    let details = latestDetails;
    if (!details || !details.details) return;

    fetch("http://localhost/api/devices/history")
        .then(response => response.json())
        .then(historyData => {
            let statusChanged = false;

            for (const [key, devices] of Object.entries(details.details)) {
                if (!Array.isArray(devices) || devices.length === 0) continue;

                devices.forEach((device) => {
                    const ip = device.ip_address || "N/A";
                    const card = document.querySelector(`[data-ip="${ip}"]`);
                    if (!card) return;

                    // Determine new status from history API if available.
                    const historyArray = historyData[ip];
                    let newStatus = (device.status || "offline").toLowerCase();
                    if (Array.isArray(historyArray) && historyArray.length > 0) {
                        const latestEntry = historyArray[historyArray.length - 1];
                        newStatus = (latestEntry.status || "offline").toLowerCase();
                    }
                    const currentStatus = card.dataset.status;

                    // Update UI: update the dot and the text.
                    const statusDot = card.querySelector(".status-dot");
                    const statusText = card.querySelector(".status-text");
                    if (statusDot) {
                        statusDot.style.backgroundColor = newStatus === "online" ? "green" : "red";
                        statusDot.classList.remove("online-dot", "offline-dot");
                        statusDot.classList.add(newStatus === "online" ? "online-dot" : "offline-dot");
                    }
                    else {
                        console.warn(`Status dot element not found for IP: ${ip}`);
                    }
                    if (statusText) {
                        const textColor = newStatus === "online" ? "green" : "red";

                        statusText.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                        statusText.style.color = textColor;
                        statusText.style.backgroundColor = "transparent";
                        statusText.style.padding = "0";
                        statusText.style.borderRadius = "0";
                    } else {
                        console.warn(`Status text element not found for IP: ${ip}`);
                    }

                    if (newStatus !== currentStatus) {
                        statusChanged = true;
                        card.dataset.status = newStatus;
                    }
                });
            }

            setTimeout(() => {
                if (statusChanged) {
                    fetchData(regionName);
                }
            }, 5000);
        })
        .catch(error => {
            console.error("Error fetching device history:", error);
        });
}

function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "0";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "0";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "0";

    document.getElementById("camera-total").textContent = data.summary?.cameras?.total || "0";
    document.getElementById("camera-online").textContent = data.summary?.cameras?.online || "0";
    document.getElementById("camera-offline").textContent = data.summary?.cameras?.offline || "0";

    document.getElementById("archiver-total").textContent = data.summary?.archivers?.total || "0";
    document.getElementById("archiver-online").textContent = data.summary?.archivers?.online || "0";
    document.getElementById("archiver-offline").textContent = data.summary?.archivers?.offline || "0";

    document.getElementById("controller-total").textContent = data.summary?.controllers?.total || "0";
    document.getElementById("controller-online").textContent = data.summary?.controllers?.online || "0";
    document.getElementById("controller-offline").textContent = data.summary?.controllers?.offline || "0";

    document.getElementById("server-total").textContent = data.summary?.servers?.total || "0";
    document.getElementById("server-online").textContent = data.summary?.servers?.online || "0";
    document.getElementById("server-offline").textContent = data.summary?.servers?.offline || "0";

    document.getElementById("pc-total").textContent = data.summary?.pcdetails?.total || "0";
    document.getElementById("pc-online").textContent = data.summary?.pcdetails?.online || "0";
    document.getElementById("pc-offline").textContent = data.summary?.pcdetails?.offline || "0";

    document.getElementById("db-total").textContent = data.summary?.dbdetails?.total || "0";
    document.getElementById("db-online").textContent = data.summary?.dbdetails?.online || "0";
    document.getElementById("db-offline").textContent = data.summary?.dbdetails?.offline || "0";

}
/*
   Updated updateDetails:
   Each device card is built with separate elements for the status dot and status text.
   This ensures that later updates from pingAllDevices can reliably find and update them.
*/



// /////////////////////////////

function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    const deviceFilter = document.getElementById("device-filter");
    const onlineFilterButton = document.getElementById("filter-online");
    const offlineFilterButton = document.getElementById("filter-offline");
    const allFilterButton = document.getElementById("filter-all");
    const cityFilter = document.getElementById("city-filter");

    detailsContainer.innerHTML = "";
    cityFilter.innerHTML = '<option value="all">All Cities</option>';

    let combinedDevices = [];
    let citySet = new Set();
    let vendorSet = new Set(); // collect normalized vendor values
    let typeCityMap = {}; // <-- NEW: map deviceType -> Set of cities

    // Icon utility based on device type
    function getDeviceIcon(type = "") {
        type = type.toLowerCase();
        if (type.includes("camera")) return "fas fa-video";
        if (type.includes("controller")) return "fas fa-cogs";
        if (type.includes("archiver")) return "fas fa-database";
        if (type.includes("server")) return "fas fa-server";
        if (type.includes("pc")) return "fas fa-desktop";
        if (type.includes("dbdetails")) return "fa-solid fa-life-ring";
        return "fas fa-microchip"; // fallback
    }

    // Fetch real-time status if available.
    fetch("http://localhost:80/api/region/devices/status")
        .then((response) => response.json())
        .then((realTimeStatus) => {
            console.log("Live Status Data:", realTimeStatus);

            for (const [key, devices] of Object.entries(data.details)) {
                if (!Array.isArray(devices) || devices.length === 0) continue;
                const deviceType = key.toLowerCase();

                // ensure map entry exists
                if (!typeCityMap[deviceType]) typeCityMap[deviceType] = new Set();

                devices.forEach((device) => {
                    const deviceIP = device.ip_address || "N/A";
                    let currentStatus = (realTimeStatus[deviceIP] || device.status || "offline").toLowerCase();
                    const city = device.city || "Unknown";

                    // collect city globally and per device type
                    citySet.add(city);
                    typeCityMap[deviceType].add(city);

                    // --- VENDOR: read possible fields, normalize, skip empty/unknown ---
                    // NOTE: your JSON uses the key "deviec_details" (typo) — we read that first.
                    let rawVendor = device.deviec_details || device.device_details || (device.device_details && device.device_details.vendor) || device.vendor || device.vendor_name || device.manufacturer || "";
                    rawVendor = (rawVendor || "").toString().trim();

                    // Normalize: empty -> null, otherwise uppercase for consistent set values
                    let vendorNormalized = rawVendor ? rawVendor.toUpperCase() : null;

                    // Only add real vendors (skip "UNKNOWN", "", null)
                    if (vendorNormalized && vendorNormalized !== "UNKNOWN") {
                        vendorSet.add(vendorNormalized);
                    }

                    const datasetVendorValue = vendorNormalized || "";

                    // Create card element.
                    const card = document.createElement("div");
                    card.className = "device-card";
                    card.dataset.type = deviceType;
                    card.dataset.status = currentStatus;
                    card.dataset.city = city;
                    if (datasetVendorValue) card.dataset.vendor = datasetVendorValue; // only set if valid
                    card.setAttribute("data-ip", deviceIP);

                    // Apply background color based on online/offline status (kept your placeholders)
                    card.style.backgroundColor = currentStatus === "online" ? "" : "";
                    card.style.borderColor = currentStatus === "online" ? "" : "";

                    // Create a container for status
                    const statusContainer = document.createElement("p");
                    statusContainer.className = "device-status";

                    // Status text
                    const statusText = document.createElement("span");
                    statusText.className = "status-text";
                    statusText.textContent = currentStatus.charAt(0).toUpperCase() + currentStatus.slice(1);
                    statusText.style.color = currentStatus === "online" ? "green" : "red";

                    // Status dot
                    const statusDot = document.createElement("span");
                    statusDot.classList.add(currentStatus === "online" ? "online-dot" : "offline-dot");
                    statusDot.style.backgroundColor = (currentStatus === "online") ? "green" : "red";
                    statusDot.style.display = "inline-block";
                    statusDot.style.width = "10px";
                    statusDot.style.height = "10px";
                    statusDot.style.marginLeft = "5px";
                    statusDot.style.marginRight = "5px";
                    statusDot.style.borderRadius = "50%";

                    // Combine status parts
                    statusContainer.appendChild(statusDot);
                    statusContainer.appendChild(statusText);

                    // compute a nicer label for the device-type area
                    let deviceLabel;

                    if (deviceType === "dbdetails") {
                        // For DB Details: show the application if available, else fallback
                        deviceLabel = device.application || deviceType.toUpperCase();
                    } else if (deviceType.includes("pc")) {
                        deviceLabel = device.pc_name || device.hostname || "PC";
                    } else {
                        deviceLabel = deviceType.toUpperCase();
                    }

                    card.insertAdjacentHTML("beforeend", `
  <h3 class="device-name" style="font-size:20px; font-weight:500; font-family: PP Right Grotesk; margin-bottom: 10px;">
      ${device.cameraname || device.controllername || device.archivername || device.servername || device.hostname || "Unknown Device"}
  </h3>

  <div class="card-content">
      <p class="device-type-label ${deviceType}" 
         style="font-size:17px;  font-family: Roboto; font-weight:100; margin-bottom: 10px; display:flex; justify-content:space-between; align-items:center;">
          
          <strong>
            <i class="${getDeviceIcon(deviceType)}" style="margin-right: 5px;"></i> 
            ${deviceLabel}
          </strong>
          
          ${deviceType.includes("camera")
                            ? `<button class="open-camera-btn"
        onclick="openCamera('${deviceIP}', '${(device.cameraname || device.controllername || "").replace(/'/g, "\\'")}', '${device.hyperlink || ""}')"
        title="Open Camera"
        style="border:none; cursor:pointer; font-weight:100; border-radius:50%; width:34px; height:34px; display:flex; justify-content:center; align-items:center;">
    <img src="images/cctv.png" alt="Logo" style="width:33px; height:33px;"/>
</button>`
                            : ""
                        }
      </p>

      <p style="font-size: ;  font-family: Roboto; margin-bottom: 8px;">
          <strong style="color:rgb(8, 8, 8);"><i class="fas fa-network-wired" style="margin-right: 6px;"></i></strong>
          <span 
              class="device-ip" 
              style="font-weight:100; color: #00adb5; cursor: pointer; text-shadow: 0 0 1px rgba(0, 173, 181, 0.3);  font-family: Roboto;"
              onclick="copyToClipboard('${deviceIP}')"
              title="Click to copy IP"
          >
              ${deviceIP}
          </span>
      </p>

      <p style="font-size: ;  font-family: Roboto; margin-bottom: 6px;">
          <strong style="color: rgb(13, 13, 13);"><i class="fas fa-map-marker-alt" style="margin-right: 5px;"></i></strong>
          <span style="font-size:; font-weight:100; color: rgb(8, 9, 9); margin-left: 12px;  font-family: Roboto; font-size: ;">${device.location || "N/A"}</span>
      </p>

      <p style="font-size:;  font-family: Roboto;>
          <strong style="color: rgb(215, 217, 222);"><i class="fas fa-city" style="margin-right: 5px;"></i></strong>
          <span style="font-weight:100; color: rgb(7, 7, 7); margin-left: 4px;  font-family: Roboto; font-size:;">${city}</span>
      </p>
  </div>
`);
                    card.appendChild(statusContainer);

                    // --- show policy tooltip for devices marked "Not accessible" ---
                    const remarkText = (device.remark || "").toString().trim();
                    if (remarkText && /not\s+access/i.test(remarkText)) {
                        if (!card.style.position) card.style.position = "relative";

                        const tooltip = document.createElement("div");
                        tooltip.className = "device-access-tooltip";
                        tooltip.textContent = "Due to Network policy, this camera is Not accessible";

                        tooltip.style.position = "absolute";
                        tooltip.style.bottom = "100%";
                        tooltip.style.left = "8px";
                        tooltip.style.padding = "6px 8px";
                        tooltip.style.background = "rgba(0,0,0,0.85)";
                        tooltip.style.color = "#fff";
                        tooltip.style.borderRadius = "4px";
                        tooltip.style.fontSize = "12px";
                        tooltip.style.whiteSpace = "nowrap";
                        tooltip.style.pointerEvents = "none";
                        tooltip.style.opacity = "0";
                        tooltip.style.transform = "translateY(-6px)";
                        tooltip.style.transition = "opacity 0.12s ease, transform 0.12s ease";
                        tooltip.style.zIndex = "999";

                        card.appendChild(tooltip);

                        card.addEventListener("mouseenter", () => {
                            tooltip.style.opacity = "1";
                            tooltip.style.transform = "translateY(-10px)";
                        });
                        card.addEventListener("mouseleave", () => {
                            tooltip.style.opacity = "0";
                            tooltip.style.transform = "translateY(-6px)";
                        });

                        card.title = tooltip.textContent;
                    }

                    // push device with normalized vendor (may be empty string if unknown)
                    combinedDevices.push({
                        card: card,
                        device: {
                            type: deviceType,
                            status: currentStatus,
                            city: city,
                            vendor: datasetVendorValue // already normalized (uppercase) or ""
                        }
                    });
                });
            }

            combinedDevices.sort((a, b) => {
                const statusA = (a.device.status === "offline") ? 0 : 1;
                const statusB = (b.device.status === "offline") ? 0 : 1;
                return statusA - statusB;
            });

            const allDevices = combinedDevices.map(item => item.card);
            const deviceObjects = combinedDevices.map(item => item.device);

            // --- NEW: function to populate city select based on selected device type ---
            function populateCityOptions(selectedType = "all") {
                // preserve current selected city if possible
                const prevSelected = cityFilter.value;

                cityFilter.innerHTML = '<option value="all">All Cities</option>';

                let citiesToShow = new Set();

                if (!selectedType || selectedType === "all") {
                    citiesToShow = citySet;
                } else {
                    const setForType = typeCityMap[selectedType];
                    if (setForType && setForType.size > 0) {
                        citiesToShow = setForType;
                    } else {
                        // no cities for selected type -> keep empty (except "All Cities")
                        citiesToShow = new Set();
                    }
                }

                // Add cities in sorted order for stable UI
                Array.from(citiesToShow).sort().forEach((city) => {
                    const option = document.createElement("option");
                    option.value = city;
                    option.textContent = city;
                    cityFilter.appendChild(option);
                });

                // restore previous if still valid, otherwise set to 'all'
                if (prevSelected && Array.from(citiesToShow).includes(prevSelected)) {
                    cityFilter.value = prevSelected;
                } else {
                    cityFilter.value = "all";
                }
            }

            // populate vendor options
            let vendorFilter = document.getElementById("vendorFilter");
            if (!vendorFilter) {
                vendorFilter = document.createElement("select");
                vendorFilter.id = "vendorFilter";
                vendorFilter.style.marginTop = "8px";
                deviceFilter.parentNode.insertBefore(vendorFilter, cityFilter);
            }

            vendorFilter.innerHTML = `<option value="all">All camera</option>`;
            [...vendorSet].sort().forEach(v => {
                if (!v) return;
                const opt = document.createElement("option");
                opt.value = v;
                opt.textContent = v;
                vendorFilter.appendChild(opt);
            });

            // hide vendor filter by default unless cameras selected
            vendorFilter.style.display = (deviceFilter.value === "cameras") ? "block" : "none";

            vendorFilter.onchange = filterDevices; // uses filterDevices defined below

            // Build initial city options for the current deviceFilter selection
            populateCityOptions(deviceFilter.value || "all");

            // avoid duplicate listeners on repeated updates
            deviceFilter.value = "all";
            cityFilter.value = "all";
            document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
            allFilterButton.classList.add("active");

            function filterDevices() {
                const selectedType = deviceFilter.value;
                const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";
                const selectedCity = cityFilter.value;
                const vendorFilterLabel = document.getElementById("vendorFilterLabel");

                // toggle vendor UI
                vendorFilter.style.display = (deviceFilter.value === "cameras") ? "block" : "none";
                if (vendorFilterLabel) {
                    vendorFilterLabel.style.display = vendorFilter.style.display;
                }

                // get vendor selection (if filter exists)
                const vendorFilterElem = document.getElementById("vendorFilter");
                const selectedVendor = vendorFilterElem ? vendorFilterElem.value : "all";

                // Search bar input
                const searchTerm = document.getElementById("device-search").value.toLowerCase();

                // Show/hide vendor filter based on type
                if (vendorFilterElem) {
                    vendorFilterElem.style.display = (selectedType === "cameras") ? "block" : "none";
                }

                detailsContainer.innerHTML = "";

                const filteredDevices = allDevices.filter((device) =>
                    (selectedType === "all" || device.dataset.type === selectedType) &&
                    (selectedStatus === "all" || device.dataset.status === selectedStatus) &&
                    (selectedCity === "all" || device.dataset.city === selectedCity) &&
                    (selectedVendor === "all" || (device.dataset.vendor || "") === selectedVendor) &&
                    (
                        !searchTerm ||
                        device.innerText.toLowerCase().includes(searchTerm)
                    )
                );

                filteredDevices.forEach((deviceCard) => {
                    detailsContainer.appendChild(deviceCard);
                });

                const region = currentRegion?.toUpperCase() || "GLOBAL";
                const titleElement = document.getElementById("region-title");

                const logoHTML = `
                    <span class="region-logo">
                        <img src="" alt=""
                        style="height: 37px; width: auto; object-fit: contain;" />
                    </span>
                    `;
                if (selectedCity !== "all") {
                    titleElement.innerHTML = `${logoHTML}<span>${region}, ${selectedCity} Summary</span>`;
                } else {
                    titleElement.innerHTML = `${logoHTML}<span>${region} Summary</span>`;
                }


                const filteredSummaryDevices = deviceObjects.filter((deviceObj, index) => {
                    const correspondingCard = allDevices[index];
                    return (
                        (selectedType === "all" || correspondingCard.dataset.type === selectedType) &&
                        (selectedStatus === "all" || correspondingCard.dataset.status === selectedStatus) &&
                        (selectedCity === "all" || correspondingCard.dataset.city === selectedCity) &&
                        (selectedVendor === "all" || (correspondingCard.dataset.vendor || "") === selectedVendor)
                    );
                });

                const summary = calculateCitySummary(filteredSummaryDevices);
                updateSummary(summary);
            }

            function calculateCitySummary(devices) {
                const summary = {
                    summary: {
                        totalDevices: devices.length,
                        totalOnlineDevices: devices.filter(d => d.status === "online").length,
                        totalOfflineDevices: devices.filter(d => d.status === "offline").length,
                        cameras: { total: 0, online: 0, offline: 0 },
                        archivers: { total: 0, online: 0, offline: 0 },
                        controllers: { total: 0, online: 0, offline: 0 },
                        servers: { total: 0, online: 0, offline: 0 },
                        pcdetails: { total: 0, online: 0, offline: 0 },
                        dbdetails: { total: 0, online: 0, offline: 0 }
                    }
                };

                devices.forEach((device) => {
                    if (!summary.summary[device.type]) return;
                    summary.summary[device.type].total += 1;
                    if (device.status === "online") summary.summary[device.type].online += 1;
                    else summary.summary[device.type].offline += 1;
                });

                return summary;
            }

            // initial filter run
            filterDevices();

            setTimeout(() => {
                const selectedCity = cityFilter.value;
                const selectedType = deviceFilter.value;
                const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";
                const vendorFilterElem = document.getElementById("vendorFilter");
                const selectedVendor = vendorFilterElem ? vendorFilterElem.value : "all";

                const filteredSummaryDevices = deviceObjects.filter((deviceObj, index) => {
                    const correspondingCard = allDevices[index];
                    return (
                        (selectedType === "all" || correspondingCard.dataset.type === selectedType) &&
                        (selectedStatus === "all" || correspondingCard.dataset.status === selectedStatus) &&
                        (selectedCity === "all" || correspondingCard.dataset.city === selectedCity) &&
                        (selectedVendor === "all" || (correspondingCard.dataset.vendor || "") === selectedVendor)
                    );
                });

                const summary = calculateCitySummary(filteredSummaryDevices);
                updateSummary(summary);
            }, 100);

            // ---- EVENTS ----
            // When device type changes, rebuild city options first then apply filters.
            deviceFilter.addEventListener("change", () => {
                populateCityOptions(deviceFilter.value || "all");
                filterDevices();
            });

            // Search bar input
            document.getElementById("device-search").addEventListener("input", filterDevices);
            cityFilter.addEventListener("change", filterDevices);
            allFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                allFilterButton.classList.add("active");
                filterDevices();
            });
            onlineFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                onlineFilterButton.classList.add("active");
                filterDevices();
            });
            offlineFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                offlineFilterButton.classList.add("active");
                filterDevices();
            });
        })
        .catch((error) => {
            console.error("Error fetching real-time device status:", error);
            detailsContainer.innerHTML = "<p>Failed to load device details.</p>";
        });
}

// /////////////////////////////





function showModal(name, ip, location, status, city) {
    document.getElementById("modal-title").textContent = `Details for ${name}`;
    document.getElementById("modal-body").innerHTML = `
            <li><strong>Name:</strong> ${name}</li>
            <li><strong>IP:</strong> ${ip}</li>
            <li><strong>Location:</strong> ${location}</li>
            <li><strong>Status:</strong> ${status}</li>
            <li><strong>City:</strong> ${city}</li>
        `;
    document.getElementById("modal").style.display = "block";
}


// Show/hide button on scroll
window.addEventListener("scroll", () => {
    const btn = document.getElementById("scrollToTopBtn");
    if (document.body.scrollTop > 200 || document.documentElement.scrollTop > 200) {
        btn.style.display = "block";
    } else {
        btn.style.display = "none";
    }
});

// Scroll to top on click
document.getElementById("scrollToTopBtn").addEventListener("click", () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
});


















C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\styles.css


/* C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\styles.css */

/* ===== Reset & Base Styles ===== */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background-color: #f9fafc;
  color: #212529;
  line-height: 1.6;
  min-height: 100vh;
  padding-top: 70px;
  margin: 0;
  font-family: Roboto, "Noto Sans", sans-serif;
  /* font-family: Roboto; */

}

/* ////////////////////////// */

/* font-family: "PP Right Grotesk";
        font-family: Roboto;
        font-family: "PP Right Grotesk" 
        font-family: PP Right Grotesk;
*/


/* ////////////////////////// */


/* 000 */
#scrollToTopBtn {
  position: fixed;
  bottom: 30px;
  right: 30px;
  z-index: 100;
  background-color: #0d6efd;
  color: white;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  border: none;
  border-radius: 50%;
  padding: 15px;
  font-size: 18px;
  cursor: pointer;
  display: none;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

#scrollToTopBtn:hover {
  background-color: #0b5ed7;
  transform: scale(1.1);
}


/* 0000 */
a {

  color: #0d6efd;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}



.container {
  display: flex;
  height: auto;
}


/* ===== Sidebar ===== */

/* ===== Enhanced Sidebar ===== */
#sidebar {
  margin-top: -25px;
  width: 240px;
  background: #ffdd00;
  border-right: 1px solid #e1e1e1;
  box-shadow: 2px 0 8px rgba(0, 0, 0, 0.03);
  padding: 30px 20px;
  display: flex;
  flex-direction: column;
  border-right: 1px solid #000000;
  gap: 5px;
}

#sidebar h2 {
  font-size: 18px;
  color: #000000;
  margin-bottom: 18px;
  display: flex;
  align-items: center;
  gap: 10px;
}

#sidebar label {
  color: #000000;
}

.region-button,
.nav-button,
.status-filter {
  color: #000000;
  background-color: #f1f3f5;
  border: 1px solid #dee2e6;
  padding: 12px 16px;
  margin-bottom: 10px;
  text-align: left;
  border-radius: 5px;  
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
  font-size: 16px;
  display: flex;
  align-items: center;
  gap: 10px;
  border: 1px solid #000000;
  outline: none;

}

.region-button:hover,
.nav-button:hover,
.status-filter:hover {
  background-color: #e9ecef;
  transform: scale(1.03);
}

.status-filter.active {
  background-color: #0d6efd;
  color: #fff;
}

select {
  background-color: #f1f3f5;
  padding: 10px;
  border-radius: 5px;
  border: none;
  color: #000000;
  margin-bottom: 14px;
  font-size: 16px;
  border: 1px solid #000000;
}


/*  */

/* Global */
.region-button[data-region="global"] i {
  color: #00adb5;
  /* Teal */
}

/* APAC */
.region-button[data-region="apac"] i {
  color: #EA4335;
  /* Orange */
}

/* EMEA */
.region-button[data-region="emea"] i {
  color: #EA4335;
  /* Deep Orange */
}

/* LACA */
.region-button[data-region="laca"] i {
  color: #EA4335;
  /* Purple */
}

/* NAMER */
.region-button[data-region="namer"] i {
  color: #EA4335;
  /* Blue */
}

/* Trend Analysis */
.nav-button i.fas.fa-chart-line {
  color: #1abc9c;
  /* Green Cyan */
}

/* Summary */
.nav-button i.fas.fa-table {
  color: #d35400;
  /* Rust Orange */
}

/* All Devices */
.status-filter[data-status="all"] i {
  color: #bdc3c7;
  /* Silver */
}

/* Online Devices */
.status-filter[data-status="online"] i {
  color: #2ecc71;
  /* Green */
}

/* Offline Devices */
.status-filter[data-status="offline"] i {
  color: #e74c3c;
  /* Red */
}

/*  */
/* Colorful Icons */


.status-filter[data-status="offline"] i {
  color: #e84118;
}

label {
  font-size: 14px;
  color: #000000;
  margin-top: 8px;
}



/* ===== Main Content ===== */
#content {
  flex: 1;
  padding: 20px 30px;
  overflow-y: auto;
}


/* === Default (Desktop) === */
#region-title {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 70px;
  background-color: #000000;
  color: #ffdd00;
  border-bottom: 3px solid #ffdd00;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  padding: 24px;
  font-size: 35px;
  /* border-bottom: 1px solid #000000; */
  /* border-top: 1px solid #000000; */
  font-family: "PP Right Grotesk";
  font-weight: 600;

}

#region-title img {
  height: 40px;
  object-fit: contain;
}

#region-title .region-logo {
  position: absolute;
  top: 10px;
  left: 60px;
}

#region-title .region-logo img {
  display: block;
}


/* === Tablets (768px – 1024px) === */
@media (max-width: 1024px) {
  #region-title {
    font-size: 28px;
    padding: 20px;
  }

  #region-title img {
    height: 35px;
  }
}

/* === Mobile (480px – 767px) === */
@media (max-width: 767px) {
  #region-title {
    font-size: 22px;
    padding: 16px;
  }

  #region-title img {
    height: 30px;
  }
}

/* === Extra Small Devices (less than 480px) === */
@media (max-width: 479px) {
  #region-title {
    font-size: 18px;
    padding: 12px;
  }

  #region-title img {
    height: 26px;
  }
}


/* ===== Summary Cards ===== */

/* Grid layout for cards */

/* ===== Fade In Animation ===== */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}


.open-camera-btn {
  background-color: rgb(240, 248, 252);


}

.open-camera-btn .bi-webcam:hover {
  color: red;

}

/* ===== Modal ===== */
#modal {
  display: none;
  position: fixed;
  z-index: 10;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
}

.modal-content {
  padding: 30px;
  border-radius: 12px;
  width: 90%;
  max-width: 600px;
  color: #f1f1f1;
}

#close-modal {
  float: right;
  font-size: 24px;
  cursor: pointer;
  color: #fbc531;
}

#modal-title {
  font-size: 20px;
  margin-bottom: 15px;
}

#modal-body li {
  margin-bottom: 8px;
  font-size: 14px;
}

/* ===== Countdown Timer ===== */
.countdown-timer {
  font-size: 14px;
  /* color: #f1f1f1; */
  color: #000000;
  margin-top: 15px;
}

/* ===== Footer ===== */

.footer {
  text-align: center;
  padding: 20px;
  font-size: 14px;
  border-top: 1px solid #2c2c3e;
background-color: #000000;

}


.footer-logo {
  height: 25px;
  /* width: 120px; */
  margin-bottom: 10px;
}

/* ===== Responsive Adjustments ===== */
@media (max-width: 768px) {
  .container {
    flex-direction: column;
  }

  #sidebar {
    width: 100%;
    border-right: none;
    border-bottom: 1px solid #2c2c3e;
  }

  .summary {
    grid-template-columns: 1fr;
  }

  .device-grid {
    grid-template-columns: 1fr;
  }
}

/* ************************************************* */
/* top card section  */
.icon-3d {
  font-size: 26px;
  margin-right: 10px;
  padding: 7px;
  border-radius: 12px;
  background: #ffcc00;
  color: #00ffe5;
  transition: transform 0.3s ease;
}

.region-logo img {
  height: 10px;
  width: auto;
  object-fit: contain;
}

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');

:root {
  --yellow: #ffcc00;
  --black: #0f0f0f;
  --dark-gray: #1a1a1a;
  --gray: #2b2b2b;
  --white: #f5f5f5;
  --green: #2cb67d;
  --red: #ef4565;
  --blue: #00adb5;
}

/* ===== Layout ===== */
.summary {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 0.50rem;
}

/* ===== Card Design ===== */
.card {
  background: #f0f8fc;
  border: 1px solid #131313;
  border-radius: 16px;
  padding: 18px;
  position: relative;
  border: 2px solid transparent;
  background-clip: padding-box;
  text-align: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
}

.card::before {
  content: "";
  position: absolute;
  inset: 0;
  padding: 2px;
  border-radius: 16px;
  background: linear-gradient(135deg, var(--card-border));
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  pointer-events: none;
  border: 1px solid #000000;
}

/* ===== Card Title ===== */
.card h3 {
  font-size: 20px;
  font-weight: 500;
  color: #000000;
  margin-bottom: 1.2rem;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  font-family: "PP Right Grotesk"
}

.card h3 i {
  color: #000000bd;
}

/*  */

/* ===== Status Boxes ===== */
.card-status {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 7px 11px;
  margin-bottom: 12px;
  border-radius: 10px;
  font-size: 18px;
  color: black;
}

/* Specific Status Styling */
.card-status.total {
  border: 1px solid #0a0b0b;
  font-size: 18px;
  border-left: 4px solid;
  border-left-color: #121212;
  background-color: #ffdd00 !important;
  color: black;
  font-weight: 500;
}

.card-status.online {
  border: 1px solid black;
  border-left: 2px solid;
  font-size: 18px;
  background-color: #32CD32 !important;
  font-weight: 500;
}

.card-status.offline {
  border: 1px solid black;
  border-left: 2px solid;
  font-size: 18px;
  background-color: #FF0000 !important;
  font-weight: 500;
}



/* ===== Badge/Text inside card-status ===== */
.card-status span {
  font-size: 18px;
}

/* ===== Divider ===== */
.section-divider {
  border: none;
  height: 2px;
  background: gray;
  border-radius: 4px;
  opacity: 0.8;
}

/* ===== Responsive Adjustments ===== */
@media screen and (max-width: 600px) {
  .summary {
    padding: 1rem;
  }

  .card h3 {
    font-size: 1.1rem;
  }

  .card-status {
    font-size: 0.9rem;
    flex-direction: column;
    gap: 8px;
    text-align: center;
  }
}

/* top card section  */


/* ===== Dark Theme Root Styling ===== */

.details-section {
  color: black;
}

/* ===== Header Section ===== */
.details-header {
  display: flex;
  align-items: center;
  padding: 20px;
  border-bottom: 1px solid #333;
  gap: 50px;

}

.details-header h2 {
  font-size: 20px;
  color: black;
  display: flex;
  align-items: center;
  gap: 10px;
  font-family: "PP Right Grotesk";
  font-weight: 500;


}

.details-header h2 i {
  color: #00adb5;
}

#device-search {
  padding: 10px;
  border-radius: 6px;
  background-color: #ffffff;
  border: 1px solid #000000;
  color: #000000;
  width: 340px;
  font-size: 15px;
  outline: none;
}

/* ===== Device Grid ===== */
.device-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
  gap: 20px;
  padding: 20px;
}

/* ===== Device Card Styling ===== */
.device-card {

  background: #f0f8fc;

  border: 1px solid #e0e0e0;
  padding: 20px;
  border-radius: 12px;
  transition: transform 0.2s ease, box-shadow 0.3s ease;
  position: relative;
  color: #212529;

}

.device-card:hover {
  transform: translateY(-4px);
}

/* ===== Online/Offline Background ===== */
.device-card[data-status="online"] {
  border: 0.11px solid #10e63468;
  border-left: 5px solid #28a745;

}

.device-card[data-status="offline"] {
  border: 0.11px solid #f6051165;
  border-left: 7px solid #f60511de;

}

/* ===== Typography ===== */
.device-name {
  font-size: 18px;
  margin-bottom: 10px;
  color: #212529;
  border-bottom: 1px solid #e0e0e0;
}

.device-type-label {
  font-size: 18px;
  margin-bottom: 12px;

}

.device-ip {
  color: #00adb5;
  cursor: pointer;
  transition: color 0.2s ease;
}

.device-ip:hover {
  color: #00fff5;
  text-decoration: underline;
}

/* ===== Status Styling ===== */
.device-status {
  margin-top: 15px;
  font-size: 18px;
  display: flex;
  align-items: center;
  color: #ccc;
}

.online-dot {
  background-color: #10e634;
}

.offline-dot {
  background-color: #f50f1a;
}

.online-dot,
.offline-dot {
  display: inline-block;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin-right: 8px;
}

/* ===== Icon Colors (by device type) ===== */



/* ===== Icon Default Styling ===== */
.device-type-label i,
.device-card i {
  margin-right: 6px;
  font-size: 18px;
}


/* Device type icons by type */
.device-type-label.cameras i {
  color: #1e88e5;
}

.device-type-label.controllers i {
  color: #8e24aa;
  /* Purple */
}

.device-type-label.archivers i {
  color: #fb8c00;
  /* Orange */
}

.device-type-label.servers i {
  color: #43a047;
  /* Green */
}


/* Specific icon styles inside <p> blocks */
.device-card p i.fa-network-wired {
  color: #007bff;
  /* Blue for IP */
}

.device-card p i.fa-map-marker-alt {
  color: #fbc531;
  /* Red for Location */
}

.device-card p i.fa-city {
  color: #9b59b6;
  /* Purple for City */
}


.card-content {}


/* ===== Responsive Adjustments ===== */
@media screen and (max-width: 600px) {
  .details-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
  }

  #device-search {
    width: 100%;
  }
}

.summary .card.active {
  background-color: #cbe1fe;
  transition: background-color 0.3s ease, border 0.3s ease;
}























C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\summary.css





@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');

:root {
  --yellow: #ffcc00;
  --black: #000000;
  --white: #f9fafc;
  --blue: #0d6efd;
  --green: #2cb67d;
  --red: #ef4565;
  --gray: #e0e0e0;
  --border-radius: 12px;
  --font-main: 'Poppins', sans-serif;
}

/* Home Icon Button (clean and minimal) */
.header-left button {
  background: none;
  border: none;
  padding: 0;
  font-size: 20px;
  color: var(--yellow);
  cursor: pointer;
  transition: transform 0.2s ease;
  margin-left: 10px;
}

.header-left button:hover {
  transform: scale(1.2);
  /* color: #fff; */
}

/* Adjust header alignment */
.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 10px;
}

header h1 {
  flex: 1;
  text-align: center;
  margin: 0;
  font-size: 28px;
  font-weight: 700;
  color: var(--yellow);
}

/* Base Reset & Layout */
body {
  margin: 0;
  font-family: var(--font-main);
  background-color: var(--white);
  color: #212529;
  line-height: 1.6;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

/* Header */
header {
  /* background-color: var(--yellow); */
    background: #090909;

  border-bottom: 1px solid #000;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  padding: 15px 20px;
}

.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
  gap: 10px;
}

.header-left {
  display: flex;
  gap: 20px;
  margin-left: 10px;
}

.header-left button {
  background: none;
  border: none;
  padding: 0;
  font-size: 17px;
  color: #1495e5;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.header-left button:hover {
  /* transform: scale(1.2); */
  /* color: #e9e1e1; */
}

header h1 {
  margin: 0;
  font-size: 30px;
  font-weight: 700;
  font-family: Georgia, serif;
  color: #ffcc00;
  display: flex;
  align-items: center;
  gap: 10px;
  flex: 1;
  justify-content: center;
  text-align: center;
}



#sidebar-content {
  padding: 30px 40px;
  max-width: 1400px;
  margin: auto;
  background-color: #ffffff;
  border-radius: var(--border-radius);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
  gap: 30px;
}



.summary-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 14px;
  padding: 20px;
  background-color: #fffdd0;
  background-color: var(--yellow);
}


.summary-card {
  background: #fff;
  border-radius: 10px;
  padding: 12px 16px;
  text-align: center;
  font-weight: 500;
  font-size: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
  transition: transform 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
  min-height: 100px;
    border: 1px solid gray;
    font-family: 'Times New Roman', Times, serif;
    font-weight: 700;

}

.summary-card i {
  font-size: 18px;
  color: var(--blue);
}

.summary-card:hover {
  transform: scale(1.03);
  background-color: #f8f9fa;
}



.device-card .icon {
  font-size: 24px;
  color: var(--red);

}
.device-card .label{
  font-weight: 700;
}

.device-card .value {
  font-size: 20px;
  font-weight: bold;
  color: var(--red);
}



.action-button {
  padding: 12px 20px;
  font-size: 15px;
  font-weight: 600;
  /* border-radius: var(--border-radius); */
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  /* background-color: var(--blue); */
  color: #fff;
}

.action-button.back {
  /* background-color: #b8d6f1; */
  color: #000;
}

.action-button.export {
  
}






/* FILTER PANEL - SINGLE ROW STRUCTURE */
.filter-panel {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 20px 30px;
  gap: 20px;
  background-color: #f9fafc;
  border: 1px solid var(--gray);
  border-radius: var(--border-radius);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

/* Subgroup wrapper for filters */
.filter-group {
  display: flex;
  flex-direction: column;
  /* min-width: 300px; */
    background: #fff;
  border: 1px solid var(--gray);
    background: #fff;
  border: 1px solid var(--gray);
  padding: 23px 40px;
  border-radius: var(--border-radius);
  /* min-width: 200px; */
  /* text-align: center; */
  font-family: 'Times New Roman', Times, serif;
  box-shadow: 0 2px 4px rgba(0,0,0,0.04);
  transition: all 0.2s ease;
}

.filter-group label {
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 6px;
  color: #097ed7;
}

.filter-group select {
  padding: 8px 20px;
  font-size: 16px;
  border-radius: var(--border-radius);
  border: 1px solid #ccc;
  background-color: #fff;
  transition: all 0.3s ease;
  width: 210px;
}

.filter-group select:hover {
  border-color: var(--blue);
}

/* DEVICE CARDS INSIDE FILTER PANEL */
.filter-panel .device-summary {
  display: flex;
  flex-direction: row;
  gap: 16px;
  padding: 0;
  background: transparent;
  border: none;
  flex-wrap: wrap;
}

.filter-panel .device-card {
  background: #fff;
  border: 1px solid var(--gray);
  padding: 5px 16px;
  border-radius: var(--border-radius);
  min-width: 180px;
  text-align: center;
  font-family: 'Times New Roman', Times, serif;
  box-shadow: 0 2px 4px rgba(227, 72, 72, 0.04);
  transition: all 0.2s ease;
  color: rgb(213, 50, 50);
}

.filter-panel .device-card:hover {
  transform: scale(1.03);
  background-color: #f8f9fa;
}

/* BUTTONS INSIDE FILTER PANEL */


/* Make filters responsive on small devices */
@media (max-width: 992px) {
  .filter-panel {
    flex-direction: column;
    align-items: stretch;
  }

  .filter-panel .device-summary {
    justify-content: center;
  }

  
}


/* Row background based on device status */
.row-online {
  background-color: #e6f9f0 !important; /* Light green */
}

.row-offline {
  background-color: #fdeaea !important; /* Light red */
  color: #212529;
}

.row-repair {
  background-color: #fff7e6 !important; /* Light amber/yellow */
}
#device-table tbody tr:hover {
  background-color: #f0f8ff;
  box-shadow: inset 0 0 0 9999px rgba(0, 123, 255, 0.05);
  cursor: pointer;
}

.status-online,
.status-offline,
.status-repair {
  font-weight: normal;
  color: #212529; /* default text color */
}
.history-btn {
  background-color: var(--yellow);
  color: #000000;
  padding: 12px;
  border: none;
  /* margin-top: 20px;   */
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
}

/* Table */
.container {
  flex: 1;
  overflow-x: auto;
  padding: 20px;
}

#device-table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid var(--gray);
  background-color: #f0f8fc;
  /* border-radius: var(--border-radius); */
  overflow: hidden;
}

#device-table th,
#device-table td {
  padding: 12px 10px;
  border: 1px solid black;
  text-align: center;
  font-size: 14px;
}

#device-table th {
  background-color: var(--yellow);
  font-weight: 700;
  font-size: 15px;
  color: #000;
}

#device-table tr:nth-child(even) {
  background-color: #ffffff;
}

#device-table tr:hover {
  background-color: #e9ecef;
  cursor: pointer;
}



/* Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 2000;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.65);
  justify-content: center;
  align-items: center;
}

.modal-content {
   margin: 10% auto;
  background-color: #fff;
  padding: 30px;
  border-radius: var(--border-radius);
  width: 90%;
  max-width: 600px;
  font-family: var(--font-main);
  color: #000;
  position: relative;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  background-color: var(--white);
}

.modal-content .close {
  position: absolute;
  top: 15px;
  right: 20px;
  font-size: 24px;
  font-weight: bold;
  color: #ff0000;
  cursor: pointer;
}

.export-btn {
  margin-top: 20px;
  background-color: var(--yellow);
  color: var(--black);
  padding: 12px 20px;
  font-size: 16px;
  font-weight: bold;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: var(--font-main);
}




/* Device History Table */
.history-table-wrapper {
  /* overflow-x: auto;
  margin-top: 15px; */
  max-height: 400px; /* or any height you prefer */
  overflow-y: auto;
  margin-top: 10px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

.history-table {
  width: 100%;
  border-collapse: collapse;
  font-family: var(--font-main);
  font-size: 14px;
  text-align: center;
  background-color: #fff;
  border: 1px solid var(--gray);
  box-shadow: 0 1px 4px rgba(0,0,0,0.05);
}

.history-table thead {
  background-color: var(--yellow);
  color: var(--black);
}

.history-table th,
.history-table td {
  padding: 10px;
  border: 1px solid #ddd;
}

.history-table tr:nth-child(even) {
  background-color: #f9f9f9;
}

.status-online {
  color: green;
  font-weight: bold;
}

.status-offline {
  color: red;
  font-weight: bold;
}

/* Responsive Adjustments */
@media (max-width: 600px) {
  .history-table {
    font-size: 12px;
  }
}

/* Toast */
.toast {
  position: fixed;
  top: 30px;
  right: 30px;
  background-color: red;
  color: white;
  padding: 12px 20px;
  border-radius: 6px;
  z-index: 9999;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease;
}

.toast.show {
  opacity: 1;
  pointer-events: auto;
  animation: fadein 0.5s, fadeout 0.5s 2s;
}
@keyframes fadein {
  from { opacity: 0; top: 20px; }
  to { opacity: 1; top: 30px; }
}
@keyframes fadeout {
  from { opacity: 1; top: 30px; }
  to { opacity: 0; top: 40px; }
}

/* Footer */
footer {
  background: #272626;
  padding: 20px;
  text-align: center;
  color: #fff;
}

.footer-logo {
  height: 20px;
  margin-bottom: 10px;
}

footer a {
  color: #fff;
  text-decoration: underline;
  font-size: 14px;
}

footer p {
  margin: 5px 0;
  font-size: 14px;
}

/* Responsive */
@media (max-width: 768px) {
  .filter-panel {
    flex-direction: column;
  }

  .device-summary {
    flex-direction: column;
    align-items: center;
  }

  .button-container {
    flex-direction: column;
    gap: 12px;
  }
}




/* highlight the row slightly */
.row-not-accessible {
  position: relative; /* so tooltip can be positioned */
  background-color: #fff4f4; /* light red tint */
}

/* hidden by default */
.row-not-accessible .modern-tooltip {
  position: absolute;
  bottom: 100%;
  left: 20px;
  margin-bottom: 6px;
  background: #e63946;       /* modern red */
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 500;
  white-space: nowrap;
  opacity: 0;
  transform: translateY(5px);
  pointer-events: none;
  transition: all 0.2s ease;
  z-index: 1000;
  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
}

/* show on hover */
.row-not-accessible:hover .modern-tooltip {
  opacity: 1;
  transform: translateY(0);
}











C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\summary.html


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Devices Summary</title>
    <link rel="icon" href="images/favicon.png" sizes="32x32" type="images/png" >

    <link rel="stylesheet" href="summary.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>

<body>




    <header>
        <div class="header-container">

            <!-- Home Icon Only (clean, left-aligned) -->
            <div class="header-left">
                <button onclick="window.location.href='index.html'" title="Back to Dashboard">
                    <i class="fas fa-home"></i>
                </button>
            </div>

            <!-- Keep other buttons if needed later -->
            <div class="header-left">
                <button class="action-button export" onclick="exportDeviceTableToExcel()" title="Export Device Table">
                    <i class="fas fa-file-excel"></i>
                </button>
            </div>

            <h1>Devices Summary</h1>


        </div>
    </header>

    <div id=" sidebar-content">


        <div class="summary-container">
            <div class="summary-card" id="total-devices">
                <i class="fas fa-network-wired"></i>
                Total Devices: <span>0</span>
            </div>
            <div class="summary-card" id="total-online">
                <i class="fas fa-signal"></i>
                 Online Devices: <span>0</span>
            </div>
            <div class="summary-card" id="total-cameras">
                <i class="fas fa-video"></i>
                Total Cameras: <span>0</span>
            </div>
            <div class="summary-card" id="total-controllers">
                <i class="fas fa-microchip"></i>
                Total Controllers: <span>0</span>
            </div>
            <div class="summary-card" id="total-archivers">
                <i class="fas fa-archive"></i>
                Total Archivers: <span>0</span>
            </div>
            <div class="summary-card" id="total-servers">
                <i class="fas fa-server"></i>
                Total Servers: <span>0</span>
            </div>
            <div class="summary-card" id="total-pcs">
                <i class="fas fa-server"></i>
                Total Desktop: <span>0</span>
            </div>
            <div class="summary-card" id="total-dbs">
                <i class="fas fa-server"></i>
                Total DB Server: <span>0</span>
            </div>
        </div>


        <div class="filter-panel">
            <!-- Downtime & Offline Cards -->
            <div class="device-summary">
                <div class="device-card">
                    <i class="fas fa-clock icon"></i>
                    <span class="label">Downtime &gt; 15 min:</span>
                    <p class="value" id="count-downtime-over-15">0</p>
                </div>
                <div class="device-card">
                    <i class="fas fa-power-off icon"></i>
                    <span class="label">Currently Offline:</span>
                    <p class="value offline" id="count-currently-offline">0</p>
                </div>
            </div>

            <!-- Region Filter -->
            <div class="filter-group">
                <label for="region">Select Region:</label>
                <select id="region" onchange="fetchDeviceData()">
                    <option value="global">Global</option>
                    <option value="apac">APAC</option>
                    <option value="emea">EMEA</option>
                    <option value="laca">LACA</option>
                    <option value="namer">NAMER</option>
                </select>
            </div>

            <!-- Device Type Filter -->
            <div class="filter-group">
                <label for="device-type">Filter by Device Type:</label>
                <select id="device-type" onchange="filterData()">
                    <option value="ALL">All</option>
                    <option value="CONTROLLER">Controller</option>
                    <option value="ARCHIVER">Archiver</option>
                    <option value="CAMERA">Camera</option>
                    <option value="SERVER">Server</option>
                    <option value="Desktop">Desktop</option>
                    <option value="DB Server">DB Server</option>
                </select>
            </div>

            <!-- Remark Filter -->
            <div class="filter-group">
                <label for="remark-filter">Filter by Remark:</label>
                <select id="remark-filter" onchange="filterData()">
                    <option value="ALL">All</option>
                    <option value="Device needs repair">Device needs repair</option>
                    <option value="Device is Online">Device is Online</option>
                    <option value="Device is Offline">Device is Offline</option>
                </select>
            </div>

            <div class="filter-group">
                <label for="city-filter">Filter by Location:</label>

                <select id="cityFilter">
                    <option value="">All Cities</option>
                </select>
            </div>

        </div>


    </div>




    <div class="container">
        <table id="device-table">
            <thead>
                <tr>
                    <th>Sr . No</th>
                    <th>Device IP</th>
                    <th>Device Name</th>
                    <th>Device Type</th>
                    <th>Device Region</th>
                    <th>City</th>
                    <!-- <th>Device Status</th> -->
                    <th>Uptime Duration</th>
                    <th>Downtime Count</th>
                    <th>Downtime Duration</th>
                    <th>Details</th>
                    <th>Remark</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <!-- Toast Container -->
    <div id="toast" class="toast"></div>
    <!-- Device History Modal -->
    <div id="device-history-modal" class="modal">

        <div class="modal-content">
            <div id="device-history-header"></div> <!-- Header for Device Name and IP -->
            <div id="device-history"></div>
            <!-- <<span class="close" onclick="closeHistoryModal()">&times;</span> -->
            <span class="close" onclick="closeHistoryModal()">&times;</span>
            <div id="device-history"></div>
            <button onclick="exportDeviceHistoryToExcel()" class="export-btn">Export Device History</button>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            fetchDeviceData();
        });
    </script>
    <script src="summary.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>


    <!-- Footer -->
    <footer class="footer">
        <img src="images/FooterLogo.png" alt="Company Logo" class="footer-logo">
        <p>&copy;2025 VisionWatch | Powered by <strong style="color: #fbc531;"" >Western Union Services India Pvt Ltd.</strong></p>
                    <p>Contact:
                        <a
                            href="
                mailto:gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com">gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com</a>
                |
                <a href="tel:+91 20 67632394">+91 2067632394</a>
        </p>
    </footer>

</body>

</html>

</body>

</html>

















C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\summary.js





let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

// Utility to turn an IP (or any string) into a safe DOM-ID fragment
function sanitizeId(str) {
    return (str || '').replace(/[^a-zA-Z0-9]/g, '_');
}

// Map device arrays to human-friendly singular category names
const deviceTypeMap = {
    cameras: 'Camera',
    archivers: 'Archiver',
    controllers: 'Controller',
    servers: 'Server',
    pcDetails: 'Desktop',
    DBDetails: 'DB Server'
};

function getDeviceName(dev, type) {
    // preserve previous logic where possible but handle pcDetails/DBDetails
    if (type === 'pcDetails') return dev.pc_name || dev.hostname || dev.name || 'Unknown';
    if (type === 'DBDetails') return dev.application || dev.hostname || dev.name || 'Unknown';
    // fallback for other device types - original code tried e.g. cameraname etc.
    return dev[(type.slice(0, -1)) + 'name'] || dev.hostname || dev.name || 'Unknown';
}

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;

    if (selectedRegion === 'All') {
        fetch(`http://localhost/api/regions/all-details`)
            .then(res => res.json())
            .then(allRegionsData => {
                // include pcDetails and DBDetails while keeping previous logic identical
                let combinedDetails = { cameras: [], archivers: [], controllers: [], servers: [], pcDetails: [], DBDetails: [] };
                Object.values(allRegionsData).forEach(regionData => {
                    if (regionData.details) {
                        ['cameras', 'archivers', 'controllers', 'servers', 'pcDetails', 'DBDetails'].forEach(type => {
                            combinedDetails[type].push(...(regionData.details[type] || []));
                        });
                    }
                });
                fetchDeviceHistory(combinedDetails);
            })
            .catch(err => console.error('Error fetching all regions data:', err));
    } else {
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(res => res.json())
            .then(regionData => {
                const d = regionData.details;
                const total = (d.cameras?.length || 0) + (d.archivers?.length || 0) + (d.controllers?.length || 0) + (d.servers?.length || 0) + (d.pcDetails?.length || 0) + (d.DBDetails?.length || 0);
                const online = ([...(d.cameras || []), ...(d.archivers || []), ...(d.controllers || []), ...(d.servers || []), ...(d.pcDetails || []), ...(d.DBDetails || [])]
                    .filter(dev => dev.status === "Online").length);

                const setWithIcon = (id, iconClass, label, value, colorClass = "") => {
                    const el = document.getElementById(id);
                    if (el) {
                        el.innerHTML = `<i class="${iconClass}"></i> ${label}: <span class="${colorClass}" style="font-weight: 700;">${value}</span>`;
                    }
                };
                setWithIcon("total-devices", "fas fa-network-wired", "Total Devices", total, "text-green");
                setWithIcon("total-online", "fas fa-signal", "Online Devices", online, "text-green");
                setWithIcon("total-cameras", "fas fa-video", "Total Cameras", d.cameras?.length || 0, "text-green");
                setWithIcon("total-controllers", "fas fa-microchip", "Total Controllers", d.controllers?.length || 0, "text-green");
                setWithIcon("total-archivers", "fas fa-database", "Total Archivers", d.archivers?.length || 0, "text-green");
                setWithIcon("total-servers", "fas fa-server", "Total Servers", d.servers?.length || 0, "text-green");
                // new summary cards (will only update if elements exist in DOM)
                setWithIcon("total-pcs", "fas fa-desktop", "Total Desktop", d.pcDetails?.length || 0, "text-green");
                setWithIcon("total-dbs", "fas fa-database", "Total DB Server", d.DBDetails?.length || 0, "text-green");

                fetchDeviceHistory(d);
            })
            .catch(err => console.error('Error fetching device data:', err));
    }
}

function fetchDeviceHistory(details) {
    fetch(`http://localhost/api/devices/history`)
        .then(res => res.json())
        .then(historyData => {
            populateDeviceTable(details, historyData);
            window.deviceHistoryData = historyData;
        })
        .catch(err => console.error('Error fetching device history:', err));
}

function populateDeviceTable(details, historyData) {
    const tbody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    let list = [];

    // include PC and DB types alongside existing ones — keep previous logic unchanged otherwise
    ['cameras', 'archivers', 'controllers', 'servers', 'pcDetails', 'DBDetails'].forEach(type => {
        details[type]?.forEach(dev => {
            const ip = dev.ip_address;
            const safe = sanitizeId(ip);
            const name = getDeviceName(dev, type);
            const category = deviceTypeMap[type] || (type.slice(0, -1).toUpperCase());
            const region = dev.location || 'Unknown';
            const city = dev.city || 'Unknown';
            const hist = filterHistoryForDisplay(historyData[ip] || [], category.toUpperCase());
            const current = dev.status || (hist.length ? hist[hist.length - 1].status : 'Unknown');
            const downCount = hist.filter(e => e.status === 'Offline').length;

            if (current === 'Offline' || downCount > 15) {
                list.push({ ip, safe, name, category, region, city, current, hist, downCount, remark: dev.remark || '' });
            }
        });
    });

    // ✅ Populate the City Filter using the list
    const cityFilter = document.getElementById('cityFilter');
    if (cityFilter) {
        const uniqueCities = [...new Set(list.map(dev => dev.city).filter(Boolean))].sort();
        cityFilter.innerHTML = '<option value="all">All Cities</option>';
        uniqueCities.forEach(city => {
            const option = document.createElement('option');
            option.value = city;
            option.textContent = city;
            cityFilter.appendChild(option);
        });

        // Ensure listener is only added once
        if (!cityFilter.dataset.listenerAdded) {
            cityFilter.addEventListener('change', filterData);
            cityFilter.dataset.listenerAdded = 'true';
        }
    }

    // Sort and count
    list.sort((a, b) => b.downCount - a.downCount);
    const downtimeOver15Count = list.filter(d => d.downCount > 15).length;
    const currentlyOfflineCount = list.filter(d => d.current === 'Offline').length;
    const setIf = (id, txt) => { const el = document.getElementById(id); if (el) el.innerText = txt; };
    setIf('count-downtime-over-15', `Devices with >15 downtimes: ${downtimeOver15Count}`);
    setIf('count-currently-offline', `Devices currently Offline: ${currentlyOfflineCount}`);

    if (!list.length) {
        const row = tbody.insertRow();
        const cell = row.insertCell();
        cell.colSpan = 10;
        cell.textContent = "No devices found";
        cell.style.textAlign = "center";
        cell.style.fontWeight = "bold";
        updateDisplayedDeviceCount(0);
        return;
    }

    list.forEach((dev, idx) => {
        const row = tbody.insertRow();
        row.classList.add(dev.current === 'Offline' ? 'row-offline' : dev.current === 'Online' ? 'row-online' : 'row-repair');
        row.style.border = "1px solid black";
        row.innerHTML = `
            <td>${idx + 1}</td>
            <td><span onclick="copyText('${dev.ip}')" style="cursor:pointer;">${dev.ip}</span></td>
            <td><span onclick="copyText('${dev.name}')" style="cursor:pointer;">${dev.name}</span></td>
            <td>${dev.category}</td>
            <td>${dev.region}</td>
            <td>${dev.city}</td>
            <td id="uptime-${dev.safe}">0h/0m/0s</td>
            <td id="downtime-count-${dev.safe}">${dev.downCount}</td>
            <td id="downtime-${dev.safe}">0h/0m/0s</td>
            <td><button class="history-btn" onclick="openDeviceHistory('${dev.ip}','${dev.name}','${dev.category}')">View History</button></td>
            <td id="remark-${dev.safe}">Device working properly</td>
        `;

        if (dev.current === "Online") {
            startUptime(dev.ip, dev.hist);
        } else {
            startDowntime(dev.ip, dev.hist, dev.category);
        }

        updateRemarks(dev.ip, dev.hist, dev.category);

        // show modern tooltip for devices marked "Not accessible"
        const remarkText = (dev.remark || '').toString().trim();
        if (remarkText && /not\s+access/i.test(remarkText)) {
            row.classList.add('row-not-accessible');

            // ensure row can position absolute children
            if (getComputedStyle(row).position === 'static') {
                row.style.position = 'relative';
            }

            const tooltip = document.createElement('div');
            tooltip.className = 'device-access-tooltip';
            tooltip.textContent = 'Due to Network policy, this camera is Not accessible';

            // inline styles so no external CSS edit required
            tooltip.style.position = 'absolute';
            tooltip.style.bottom = '65%';
            tooltip.style.left = '200px';
            tooltip.style.padding = '8px 10px';
            tooltip.style.background = '#313030'; // modern red
            tooltip.style.color = '#fff';
            tooltip.style.borderRadius = '6px';
            tooltip.style.fontSize = '13px';
            tooltip.style.fontWeight = '600';
            tooltip.style.whiteSpace = 'nowrap';
            tooltip.style.pointerEvents = 'none';
            tooltip.style.opacity = '0';
            tooltip.style.transform = 'translateY(6px)';
            tooltip.style.transition = 'opacity 0.18s ease, transform 0.18s ease';
            tooltip.style.zIndex = '9999';
            tooltip.style.boxShadow = '0 6px 14px rgba(0,0,0,0.18)';

            row.appendChild(tooltip);

            row.addEventListener('mouseenter', () => {
                tooltip.style.opacity = '1';
                tooltip.style.transform = 'translateY(0)';
            });
            row.addEventListener('mouseleave', () => {
                tooltip.style.opacity = '0';
                tooltip.style.transform = 'translateY(6px)';
            });

            // accessible fallback
            row.title = tooltip.textContent;
        }
    });

    filterData();
}

function filterHistoryForDisplay(hist, category) {
    if (category === 'SERVER') return hist.slice(); // show all
    // else: remove any offline entries that resolve within 5 minutes
    const filtered = [];
    let lastOff = null;
    hist.forEach(e => {
        if (e.status === 'Offline') {
            lastOff = e;
        } else if (e.status === 'Online' && lastOff) {
            const diff = (new Date(e.timestamp) - new Date(lastOff.timestamp)) / 1000;
            if (diff >= 300) {
                // keep the offline event and the matching online event
                filtered.push(lastOff, e);
            }
            lastOff = null;
        } else {
            filtered.push(e);
        }
    });
    // If an Offline at end with no Online, and it's >5min ago, keep it
    if (lastOff) {
        const diff = (Date.now() - new Date(lastOff.timestamp)) / 1000;
        if (diff >= 300) filtered.push(lastOff);
    }
    return filtered.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
}

function startUptime(ip, hist) {
    const safe = sanitizeId(ip);
    clearInterval(deviceDowntimeTimers[safe]);
    const lastOn = hist.filter(e => e.status === 'Online').pop();
    if (!lastOn) return;
    const start = new Date(lastOn.timestamp).getTime();
    deviceUptimeTimers[safe] = setInterval(() => {
        const secs = Math.floor((Date.now() - start) / 1000);
        const el = document.getElementById(`uptime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
    }, 1000);
}

function startDowntime(ip, hist, category) {
    const safe = sanitizeId(ip);
    clearInterval(deviceUptimeTimers[safe]);
    const lastOff = hist.filter(e => e.status === 'Offline').pop();
    if (!lastOff) return;
    const start = new Date(lastOff.timestamp).getTime();
    deviceDowntimeTimers[safe] = setInterval(() => {
        const secs = Math.floor((Date.now() - start) / 1000);
        const el = document.getElementById(`downtime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
        updateDowntimeCount(ip, hist, category);
    }, 1000);
}

function updateDowntimeCount(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = filterHistoryForDisplay(hist, category).filter(e => e.status === 'Offline');
    const count = offs.length;
    const el = document.getElementById(`downtime-count-${safe}`);
    if (el) el.innerText = count;
    updateRemarks(ip, hist, category);
}

function updateRemarks(ip, hist, category) {
    const safe = sanitizeId(ip);
    const filteredOffs = filterHistoryForDisplay(hist, category).filter(e => e.status === 'Offline');
    const count = filteredOffs.length;
    const lastStatus = hist.length ? hist[hist.length - 1].status : 'Unknown';
    const el = document.getElementById(`remark-${safe}`);
    if (!el) return;

    if (lastStatus === 'Offline') {
        el.innerText = count >= 10 ? "Device is Offline, needs repair." : "Device is Offline.";
    }
    else if (lastStatus === 'Online') {
        if (count >= 10) el.innerText = "Device is Online, needs repair.";
        else if (count > 0) el.innerText = `Device is Online, it had ${count} downtime occurrences.`;
        else el.innerText = "Device is Online.";
    }
    else {
        el.innerText = "Device status unknown.";
    }
    const dc = document.getElementById(`downtime-count-${safe}`);
    if (dc) dc.innerText = count;
}

function formatDuration(seconds) {
    const d = Math.floor(seconds / 86400);
    const h = Math.floor((seconds % 86400) / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = Math.round(seconds % 60);
    const parts = [];
    if (d) parts.push(`${d}d`);
    if (h) parts.push(`${h}h`);
    if (m) parts.push(`${m}m`);
    if (s || !parts.length) parts.push(`${s}s`);
    return parts.join('/');
}

function openDeviceHistory(ip, name, category) {
    if (!window.deviceHistoryData) return console.error("No history loaded");
    const raw = window.deviceHistoryData[ip] || [];
    const hist = filterHistoryForDisplay(raw, category);
    displayDeviceHistory(ip, name, category, hist);
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display = 'block';
}

function calculateDowntimeDuration(ts, hist) {
    const start = new Date(ts).getTime();
    const nextUp = hist.find(e => e.status === 'Online' && new Date(e.timestamp).getTime() > start);
    if (nextUp) return formatDuration((new Date(nextUp.timestamp).getTime() - start) / 1000);
    return formatDuration((Date.now() - start) / 1000);
}

function displayDeviceHistory(ip, name, category, hist) {
    const header = document.getElementById('device-history-header');
    const container = document.getElementById('device-history');

    if (header) {
        header.innerHTML = `
            <h2 style="color: var(--yellow); font-size: 24px; margin-bottom: 10px;">Device History</h2>
            <p><strong>Device Name:</strong> ${name}</p>
            <p><strong>Device IP:</strong> ${ip}</p>
            <hr style="margin: 15px 0; border-color: var(--gray);">`;
    }

    if (!container) return;

    container.innerHTML = '';

    if (!hist.length) {
        container.innerHTML = `<p style="font-style: italic; color: #555;">No significant history (all brief outages &lt; 5 min).</p>`;
        return;
    }

    let html = `
        <div class="history-table-wrapper" >
          <table class="history-table">
            <thead>
              <tr>
                <th>Sr. No</th>
                <th>Date</th>
                <th>Day</th>
                <th>Time</th>
                <th>Status</th>
                <th>Downtime Duration</th>
              </tr>
            </thead>
            <tbody>
    `;

    let lastOff = null;
    hist.forEach((e, i) => {
        const d = new Date(e.timestamp);
        const date = d.toLocaleDateString();
        const day = d.toLocaleString('en-US', { weekday: 'long' });
        const time = d.toLocaleTimeString();
        let dur = '-';
        if (e.status === 'Offline') lastOff = e.timestamp;
        else if (e.status === 'Online' && lastOff) {
            dur = calculateDowntimeDuration(lastOff, hist);
            lastOff = null;
        }

        html += `
          <tr>
            <td>${i + 1}</td>
            <td>${date}</td>
            <td>${day}</td>
            <td>${time}</td>
            <td class="${e.status === 'Offline' ? 'status-offline' : 'status-online'}">${e.status}</td>
            <td>${dur}</td>
          </tr>`;
    });

    html += `</tbody></table></div>`;
    container.innerHTML = html;
}

function closeHistoryModal() {
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display = 'none';
}

// Updated filterData: keep earlier behaviour but include PC/DB counts
function filterData() {
    const searchValue = document.getElementById('searchBox')?.value.toLowerCase() || "";
    const selectedCity = document.getElementById('cityFilter')?.value.toLowerCase().trim();
    const selectedDeviceType = document.getElementById('device-type')?.value.toLowerCase().trim();
    const selectedRemark = document.getElementById('remark-filter')?.value.toLowerCase().trim();

    const rows = document.querySelectorAll('#device-table tbody tr');
    let visibleCount = 0;

    let totalDevices = 0;
    let totalOnline = 0;
    let totalCameras = 0;
    let totalControllers = 0;
    let totalArchivers = 0;
    let totalServers = 0;
    let totalPCs = 0;
    let totalDBs = 0;
    let currentlyOffline = 0;
    let downtimeOver15 = 0;

    rows.forEach(row => {
        const ip = row.cells[1].textContent.trim();
        const name = row.cells[2].textContent.toLowerCase();
        const category = row.cells[3].textContent.toLowerCase().trim();
        const region = row.cells[4].textContent.toLowerCase().trim();
        const city = row.cells[5].textContent.toLowerCase().trim();
        const remark = document.getElementById(`remark-${sanitizeId(ip)}`)?.innerText.toLowerCase().trim() || "";
        const currentStatus = row.classList.contains("row-offline") ? "offline" : "online";
        const downtimeCount = parseInt(row.cells[7].textContent.trim());

        const matchesSearch = [ip, name, category, region, city].some(text =>
            text.includes(searchValue)
        );

        const matchesCity = !selectedCity || selectedCity === "all" || city === selectedCity;
        const matchesType = selectedDeviceType === "all" || category === selectedDeviceType;
        const matchesRemark = selectedRemark === "all" || remark.includes(selectedRemark);

        const shouldDisplay = matchesSearch && matchesCity && matchesType && matchesRemark;
        row.style.display = shouldDisplay ? "" : "none";

        if (shouldDisplay) {
            visibleCount++;
            totalDevices++;
            if (currentStatus === "online") totalOnline++;
            if (currentStatus === "offline") currentlyOffline++;
            if (downtimeCount > 15) downtimeOver15++;

            if (category === "camera") totalCameras++;
            else if (category === "controller") totalControllers++;
            else if (category === "archiver") totalArchivers++;
            else if (category === "server") totalServers++;
            else if (category === "Desktop") totalPCs++;
            else if (category === "DB Server") totalDBs++;
        }
    });

    updateDisplayedDeviceCount(visibleCount);

    // Update summary cards based on filtered data
    const setSummary = (id, iconClass, label, value) => {
        const el = document.getElementById(id);
        if (el) {
            el.innerHTML = `<i class="${iconClass}"></i> ${label}: <span style="font-weight:700;">${value}</span>`;
        }
    };

    setSummary("total-devices", "fas fa-network-wired", "Total Devices", total);
    setSummary("total-online", "fas fa-signal", "Online Devices", online);
    setSummary("total-cameras", "fas fa-video", "Total Cameras", totalCameras);
    setSummary("total-controllers", "fas fa-microchip", "Total Controllers", totalControllers);
    setSummary("total-archivers", "fas fa-database", "Total Archivers", totalArchivers);
    setSummary("total-servers", "fas fa-server", "Total Servers", totalServers);
    // new summaries
    setSummary("total-pcs", "fas fa-desktop", "Total Desktop", totalPCs);
    setSummary("total-dbs", "fas fa-database", "Total DB Server", totalDBs);

    const setText = (id, value) => {
        const el = document.getElementById(id);
        if (el) el.innerText = value;
    };

    setText("count-downtime-over-15", `Devices with >15 downtimes: ${downtimeOver15}`);
    setText("count-currently-offline", `Devices currently Offline: ${currentlyOffline}`);
}

function updateDisplayedDeviceCount(count) {
    const el = document.getElementById('device-count');
    if (el) el.innerText = `Displayed Devices: ${count}`;
}

document.addEventListener("DOMContentLoaded", () => {
    ['region', 'device-type', 'remark-filter'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.addEventListener('change', id === 'region' ? fetchDeviceData : filterData);
    });

    const cityFilter = document.getElementById('city-filter');
    if (cityFilter) {
        cityFilter.addEventListener('change', filterData);
    }

    fetchDeviceData();
});

function exportDeviceTableToExcel() {
    const tbl = document.getElementById("device-table");
    if (!tbl) return;
    const wb = XLSX.utils.table_to_book(tbl, { sheet: "Device Table" });
    XLSX.writeFile(wb, "Device_Table.xlsx");
}

function exportDeviceHistoryToExcel() {
    const histTbl = document.querySelector("#device-history-modal table");
    if (!histTbl) return alert("Please open a device's history first.");
    const wb = XLSX.utils.table_to_book(histTbl, { sheet: "Device History" });
    XLSX.writeFile(wb, "Device_History.xlsx");
}

function copyText(text) {
    if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text)
            .then(() => showToast(`Copied: ${text}`))
            .catch(err => console.error("Copy failed: ", err));
    } else {
        // fallback
        const textarea = document.createElement("textarea");
        textarea.value = text;
        document.body.appendChild(textarea);
        textarea.select();
        try {
            document.execCommand("copy");
            showToast(`Copied: ${text}`);
        } catch (err) {
            console.error("Fallback copy failed:", err);
        }
        document.body.removeChild(textarea);
    }
}

function showToast(message) {
    const toast = document.getElementById("toast");
    toast.textContent = message;
    toast.className = "toast show";
    setTimeout(() => {
        toast.className = toast.className.replace("show", "");
    }, 2500);
}

function copyToClipboard(elementId) {
    const text = document.getElementById(elementId)?.innerText;
    if (text) {
        navigator.clipboard.writeText(text)
            .then(() => showToast(`Copied: ${text}`))
            .catch(err => console.error("Failed to copy:", err));
    }
}

// ..........

// ......













C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\trend.css



@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');

:root {
  --yellow: #ffcc00;
  --black: #000000;
  --white: #f9fafc;
  --blue: #0d6efd;
  --green: #2cb67d;
  --red: #ef4565;
  --gray: #e0e0e0;
  --border-radius: 12px;
  --font-main: 'Poppins', sans-serif;
}

body {
  font-family: var(--font-main);
  background-color: var(--white);
  color: #212529;
  margin: 0;
  line-height: 1.6;
  display: flex;
  flex-direction: column;
  height: 100vh;
}





/* Clean header layout */
header {
  /* background-color: var(--yellow); */
    background: #090909;

  border-bottom: 3px solid var(--yellow);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  padding: 15px 20px;
}

.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
  gap: 10px;
}

.header-left {
  display: flex;
  gap: 20px;
  margin-left: 10px;
}

.header-left button {
  background: none;
  border: none;
  padding: 0;
  font-size: 17px;
  color: #1495e5;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.header-left button:hover {
  transform: scale(1.2);
  color: #e9e1e1;
}

header h1 {
  margin: 0;
  font-size: 30px;
  font-weight: 700;
  font-family: Georgia, serif;
  color: #ffcc00;
  display: flex;
  align-items: center;
  gap: 10px;
  flex: 1;
  justify-content: center;
  text-align: center;
}




/* Layout: sidebar + content */
.main-layout {
  display: flex;
  flex: 1;
  overflow: hidden;
  flex-direction: row;
  align-items: stretch; /* makes sidebar full height */
  /* gap: 20px; */
  margin-bottom: 100px; /* reserve space for footer */
}




#sidebar-content {
  background-color: var(--yellow);
  border-right: 1px solid #000;
  display: flex;
  padding: 30px 20px;
  flex-direction: column;
  gap: 15px;
  width: 250px; /* fixed width */
  flex-shrink: 0;
  
}

#export-btn{
  background-color: #b8d6f1;
}

#export-btn:hover{
  background-color: #d4e6f6;
}

#sidebar-content button,
#sidebar-content select {
  /* background-color: #f1f3f5; */
  color: #000;
  border: 1px solid #000000;
  padding: 12px;
  border-radius: 5px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

#sidebar-content button:hover,
#sidebar-content select:hover {
  background-color: #e9ecef;
  transform: scale(1.02);
}

#sidebar-content label {
  font-weight: 600;
  margin-top: 10px;
  font-size: 14px;
}


.search-bar {
  position: relative;
  width: 100%;
  box-sizing: border-box;
  max-width: 100%;
  overflow: hidden;
  
}

.search-bar input {
  width: 100%;
  box-sizing: border-box;
  padding: 10px 14px 10px 38px; /* make room for icon */
  font-size: 15px;
   border-radius: 5px;
    border: 1px solid #000000;
  background-color: #fff;
  font-family: var(--font-main);
  transition: border 0.3s ease, box-shadow 0.3s ease;
}

.search-bar input:focus {
  outline: none;
  border-color: var(--blue);
  box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.2);
}

.search-icon {
  position: absolute;
  top: 50%;
  left: 12px;
  transform: translateY(-50%);
  color: #888;
  font-size: 16px;
  pointer-events: none;
}

.search-bar input::placeholder {
  color: #999;
  font-size: 14px;
}



.search-bar input:hover {
  border-color: #aaa;
}



/* Table Container */
.container {
  
  flex: 1;
  overflow-y: auto;
  max-height: calc(100vh - 250px); /* adjust based on header + footer */
  /* margin-bottom: 10rem; */
  /* padding: 20px 0; */
  padding-bottom: 80px; /* for footer space */

}

/* Table */
#device-table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid var(--gray);
  background-color: #f0f8fc;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
  /* border-radius: var(--border-radius); */
  overflow: hidden;
}

#device-table th{
   padding: 12px 10px;
  border: 1px solid black;
  text-align: center;
  font-size: 14px;
  border-bottom: 1px solid black;
}
#device-table td {
  /* padding: 5px 10px; */
  border: 1px solid black;
  text-align: center;
  font-size: 14px;
}

#device-table th {
  background-color: var(--yellow);
  color: #000;
  font-weight: 700;
  font-size: 15px;
}

#device-table tr:nth-child(even) {
  background-color: #ffffff;
}

#device-table tr:hover {
  background-color: #e9ecef;
}

/* Status Color Coding */

.table-container {
  max-height: calc(100vh - 200px); /* adjust if needed */
  overflow-y: auto;
  margin-bottom: 1rem;
}

/* Row background based on device status */
.row-online {
  background-color: #e6f9f0 !important; /* Light green */
}

.row-offline {
  background-color: #fdeaea !important; /* Light red */
}

.row-repair {
  background-color: #fff7e6 !important; /* Light amber/yellow */
}
#device-table tbody tr:hover {
  background-color: #f0f8ff;
  box-shadow: inset 0 0 0 9999px rgba(0, 123, 255, 0.05);
  cursor: pointer;
}


.status-online,
.status-offline,
.status-repair {
  font-weight: normal;
  color: #212529; /* default text color */
}


.status-repair {
  color: #f59e0b;
  font-weight: bold;
}

/* Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 2000;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.65);
  justify-content: center;
  align-items: center;
}

.modal-content {
  background-color: #fff;
  padding: 30px;
  border-radius: var(--border-radius);
  width: 90%;
  max-width: 600px;
  font-family: var(--font-main);
  color: #000;
  position: relative;
   margin: 10% auto;

}




/* Scrollable container for table */
.scrollable-history-table {
  max-height: 400px; /* or any height you prefer */
  overflow-y: auto;
  margin-top: 10px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

/* Optional: keep header visible when scrolling (sticky header) */
.history-table thead th {
  position: sticky;
  top: 0;
  background-color: var(--yellow);
  z-index: 1;
}

/* Table styling */
.history-table {
  width: 100%;
  border-collapse: collapse;
  font-family: var(--font-main);
  font-size: 14px;
  background-color: var(--white);
  box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  border: 1px solid #ccc;
  text-align: center;
}

.history-table thead {
  background-color: var(--yellow);
  color: var(--black);
}

.history-table th,
.history-table td {
  padding: 10px;
  border: 1px solid #ddd;
}

.history-table tr:nth-child(even) {
  background-color: #f9f9f9;
}

/* Status colors */
.status-online {
  color: green;
  font-weight: bold;
}

.status-offline {
  color: red;
  font-weight: bold;
}

/* Responsive */
@media (max-width: 600px) {
  .history-table {
    font-size: 12px;
  }
}




.history-btn {
  background-color: var(--yellow);
  color: #000000;
  padding: 12px;
  border: none;
  margin-top: 20px;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
}

.modal-content button.history-btn:hover {
  background-color: #0b5ed7;
}

.close {
  position: absolute;
  top: 15px;
  right: 20px;
  font-size: 24px;
  font-weight: bold;
  color: #ff0000;
  cursor: pointer;
}

/* Toast */
.toast {
  position: fixed;
  top: 30px;
  right: 30px;
  background-color: red;
  color: white;
  padding: 12px 20px;
  border-radius: 6px;
  z-index: 9999;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease;
}

.toast.show {
  opacity: 1;
  pointer-events: auto;
  animation: fadein 0.5s, fadeout 0.5s 2s;
}
@keyframes fadein {
  from { opacity: 0; top: 20px; }
  to { opacity: 1; top: 30px; }
}
@keyframes fadeout {
  from { opacity: 1; top: 30px; }
  to { opacity: 0; top: 40px; }
}

/* Footer */
 footer {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  background: #272626;
  /* background: var(--yellow); */
  /* border-top: 1px solid #ccc; */
    border-top: 3px solid var(--yellow);

  z-index: 1000;
  padding: 10px 20px;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.05);
  color: #fff;
}

.footer-logo {
  height: 20px;
}

.footer a {
  color: #fff;
  text-decoration: underline;
  font-size: 14px;
}

footer p {
  margin: 2px 0;
  font-size: 14px;
}


/* Responsive */
@media (max-width: 768px) {
  .main-layout {
    flex-direction: column;
  }

  #sidebar-content {
    max-width: 100%;
    border-right: none;
    border-bottom: 1px solid #000;
  }

  .container {
    padding-top: 20px;
  }

  header h1 {
    font-size: 24px;
    padding: 16px;
  }
}


/* ///////////////// */


/* highlight the row slightly */
.row-not-accessible {
  position: relative; /* so tooltip can be positioned */
  background-color: #fff4f4; /* light red tint */
}

/* hidden by default */
.row-not-accessible .modern-tooltip {
  position: absolute;
  bottom: 65%;
  left: 200px;
  margin-bottom: 6px;
  background: #313030;       /* modern red */
  color: #fff;
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 500;
  white-space: nowrap;
  opacity: 0;
  transform: translateY(5px);
  pointer-events: none;
  transition: all 0.2s ease;
  z-index: 1000;
  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
}

/* show on hover */
.row-not-accessible:hover .modern-tooltip {
  opacity: 1;
  transform: translateY(0);
}


























C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\trend.html



<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Devices Trend Details</title>

    <link rel="icon" href="images/favicon.png" sizes="32x32" type="images/png">

    <link rel="stylesheet" href="trend.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">


    <style>
        .alert-window {
            /* background-color: rgba(255, 255, 255, 0.95); */
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
            margin-right: 20px;
        }

        .alert-toast-panel {
            background-color: #ffffff;
            border: 1px solid #aaa;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
            font-family: sans-serif;
            transition: opacity 0.3s ease;
        }

        .alert-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
            margin-bottom: 4px;
        }

        .alert-body {
            font-size: 14px;
            white-space: pre-wrap;
        }

        .close-btn {
            cursor: pointer;
            color: red;
            font-size: 16px;
        }

        #scrollTopBtn {
            position: fixed;
            bottom: 120px;
            right: 30px;
            z-index: 9999;
            background-color: #0d6efd;
            color: white;
            /* box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); */
            outline: none;
            padding: 10px 15px;
            border-radius: 50%;
            font-size: 18px;
            cursor: pointer;
            display: none;
            transition: background-color 0.3s;
        }

        #scrollTopBtn:hover {
            background-color: #0b5ed7;

            transform: scale(1.1);
        }

        .custom-alert-modal {
            display: none;
            position: fixed;
            z-index: 9999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
        }

        .custom-alert-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 400px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        .custom-alert-close {
            position: absolute;
            right: 12px;
            top: 10px;
            font-size: 24px;
            cursor: pointer;
        }

        #custom-alert-title {
            margin: 0 0 10px;
            color: #d9534f;
        }

        #custom-alert-message {
            white-space: pre-wrap;
        }


        .alert-toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .alert-toast {
            background-color: #fff3cd;
            /* color: #856404; */
            border: 1px solid #ffeeba;
            padding: 12px 16px;
            border-radius: 6px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
            min-width: 300px;
            max-width: 400px;
            font-size: 14px;
            position: relative;
            opacity: 0;
            animation: fadeIn 0.5s forwards;
        }

        .alert-toast h4 {
            margin: 0 0 6px;
            font-size: 16px;
            color: #856404;
        }

        .alert-toast .close-btn {
            position: absolute;
            top: 8px;
            right: 12px;
            cursor: pointer;
            font-weight: bold;
        }

        @keyframes fadeIn {
            to {
                opacity: 1;
            }
        }
    </style>



</head>

<body>
    <div id="alert-toast-container" class="alert-toast-container"></div>

  



    <button id="scrollTopBtn" title="Scroll to Top">
        <i class="bi bi-chevron-double-up"></i>
    </button>



    <header>
        <div class="header-container">
            <div class="header-left">
                <button onclick="window.location.href='index.html'" title="Back to Dashboard">
                    <i class="fas fa-home"></i>
                </button>
                <button onclick="window.location.href='summary.html'" title="View Summary">
                    <i class="fas fa-table"></i>
                </button>
            </div>
            <h1><i class="fas fa-chart-line"></i> Devices Trend Details</h1>
        </div>
    </header>

    <!-- Main layout: sidebar + table -->
    <div class="main-layout">
        <!-- Sidebar -->
        <div id="sidebar-content">


            <div class="search-bar">
                <i class="fas fa-search search-icon"></i>
                <input type="text" id="search-input" placeholder="Search by IP, Location, City" />
            </div>




            <!-- <button onclick="exportDeviceTableToExcel()"><i class="fas fa-file-export"></i> Export Device Table</button> -->
            <button onclick="exportDeviceTableToExcel()" id="export-btn"><i class="fas fa-file-export"></i> Export
                Device Table</button>

            <label for="region">Select Region:</label>
            <select id="region" onchange="fetchDeviceData()">
                <option value="global" selected>Global</option>
                <option value="apac">APAC</option>
                <option value="emea">EMEA</option>
                <option value="laca">LACA</option>
                <option value="namer">NAMER</option>
            </select>

            <label for="device-type">Filter by Device Type:</label>
            <select id="device-type" onchange="filterData()">
                <option value="ALL">All</option>
                <option value="CONTROLLER">Controller</option>
                <option value="ARCHIVER">Archiver</option>
                <option value="CAMERA">Camera</option>
                <option value="SERVER">Server</option>
                 <option value="Desktop">Desktop</option>
                <option value="DB Server">DB Server</option>
                
            </select>

            <label for="remark-filter">Filter by Remark:</label>
            <select id="remark-filter" onchange="filterData()">
                <option value="ALL">All</option>
                <option value="Device needs repair">Device needs repair</option>
                <option value="Device is Online">Device is Online</option>
                <option value="Device is Offline">Device is Offline</option>
            </select>




            <label for="cityFilter">City:</label>
            <select id="cityFilter">
                <option value="all">All Cities</option>
            </select>



        </div>

        <!-- Table -->
        <div class="container" id="table-container">

            <table id="device-table">
                <thead>
                    <tr>
                        <th>Sr. No</th>
                        <th>Device IP</th>
                        <th>Device Name</th>
                        <th>Device Type</th>
                        <th>City</th>
                        <th>Uptime Duration</th>
                        <th>Downtime Count</th>
                        <th>Downtime Duration</th>
                        <th>Details</th>
                        <th>Remark</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <!-- Toast -->
    <div id="toast" class="toast"></div>

    <!-- Device History Modal -->
    <div id="device-history-modal" class="modal">
        <div class="modal-content">
            <div id="device-history-header"></div>
            <div id="device-history"></div>
            <span class="close" onclick="closeHistoryModal()">&times;</span>
            <button onclick="exportDeviceHistoryToExcel()" class="history-btn">
                <i class="fas fa-download"></i> Export Device History
            </button>
        </div>
    </div>

    <footer class="footer">
        <img src="images/footerLogo.png" alt="Company Logo" class="footer-logo" />
        <p>&copy;2025 VisionWatch | Powered by <strong style="color: #ffcc00;">Western Union
                Ltd.</strong></p>
        <p>Contact:
            <a href="mailto:gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com">
                gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com
            </a> |
            <a href="tel:+91 20 67632394">+91 2067632394</a>
        </p>
    </footer>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            fetchDeviceData();
        });
    </script>



    <script>
        const tableContainer = document.getElementById("table-container");
        const scrollTopBtn = document.getElementById("scrollTopBtn");

        // Show button when scrolling down
        tableContainer.addEventListener("scroll", () => {
            scrollTopBtn.style.display = tableContainer.scrollTop > 100 ? "block" : "none";
        });

        // Scroll to top on click
        scrollTopBtn.addEventListener("click", () => {
            tableContainer.scrollTo({ top: 0, behavior: "smooth" });
        });
    </script>

    <script src="trend.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>



</body>

</html>
















C:\Users\W0024618\Desktop\NewFrontend\Device Dashboard\trend.js






let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

let deviceOfflineAlerted = {};
let deviceOnlineAlerted = {};

function notifyWindows(title, message) {
  if (Notification.permission === 'granted') {
    new Notification(title, { body: message });
  } else if (Notification.permission !== 'denied') {
    Notification.requestPermission().then(permission => {
      if (permission === 'granted') {
        new Notification(title, { body: message });
      }
    });
  }

  showToastAlert(title, message);
}


// function notifyWindows(title, message) {
//   showToastAlert(title, message);
// }

function showToastAlert(title, message) {
  const container = document.getElementById('alert-toast-container');

  const toast = document.createElement('div');
  toast.className = 'alert-toast';

  // toast.innerHTML = `
  //   <div class="close-btn" onclick="this.parentElement.remove()">×</div>
  //   <h4>${title}</h4>
  //   <pre>${message}</pre>
  // `;

  toast.innerHTML = `
  <div class="close-btn">×</div>
  <h4>${title}</h4>
  <pre>${message}</pre>
`;

  const closeBtn = toast.querySelector('.close-btn');
  closeBtn.addEventListener('click', () => {
    toast.remove();
  });

  container.appendChild(toast);

  // Auto-remove after 10 seconds
  setTimeout(() => {
    toast.remove();
  }, 180000);
}


function startDowntime(ip, hist, category) {
  const safe = sanitizeId(ip);
  clearInterval(deviceUptimeTimers[safe]);

  const off = hist.filter(e => e.status === 'Offline').pop();
  if (!off) return;

  const t0 = new Date(off.timestamp).getTime();

  deviceOfflineAlerted[safe] = false;  // Reset per event

  deviceDowntimeTimers[safe] = setInterval(() => {
    const secs = Math.floor((Date.now() - t0) / 1000);
    document.getElementById(`downtime-${safe}`).innerText = formatDuration(secs);
    document.getElementById(`downtime-count-${safe}`).innerText = hist.filter(e => e.status === 'Offline').length;
    updateRemarks(ip, hist, null, null);

    // 🔔 Notify if offline ≥ 3 min
    if (secs >= 180 && !deviceOfflineAlerted[safe]) {
      deviceOfflineAlerted[safe] = true;

      const name = document.getElementById(`name-${safe}`).innerText;
      const type = document.querySelector(`#ip-${safe}`).parentNode.nextElementSibling.textContent;
      const city = document.getElementById(`remark-${safe}`).dataset.city || 'Unknown';

      const title = "⚠️ Device Offline ≥ 3 min";
      const message =
        `Device Name: ${name}\n` +
        `Device Type: ${category}\n` +
        `Device IP: ${ip}\n` +
        `City: ${city}\n` +
        `Status: Device is Offline\n` +
        `Offline Time: ${formatDuration(secs)}`;

      // notifyWindows(title, message);
    }
  }, 1000);
}



function startUptime(ip, hist, category) {
  const safe = sanitizeId(ip);
  clearInterval(deviceDowntimeTimers[safe]);

  const on = hist.filter(e => e.status === 'Online').pop();
  if (!on) return;

  const tOn = new Date(on.timestamp).getTime();

  // Calculate how long it was offline
  const lastOff = hist.slice().reverse().find(e => e.status === 'Offline');
  const offlineSecs = lastOff ? Math.floor((tOn - new Date(lastOff.timestamp)) / 1000) : 0;

  deviceOnlineAlerted[safe] = false;

  if (offlineSecs >= 120 && !deviceOnlineAlerted[safe]) {
    deviceOnlineAlerted[safe] = true;

    const name = document.getElementById(`name-${safe}`).innerText;
    const type = document.querySelector(`#ip-${safe}`).parentNode.nextElementSibling.textContent;
    const city = document.getElementById(`remark-${safe}`).dataset.city || 'Unknown';

    const title = "✅ Device is Online after 2+ min";
    const message =
      `Device Name: ${name}\n` +
      `Device Type: ${category}\n` +
      `Device IP: ${ip}\n` +
      `City: ${city}`;

    notifyWindows(title, message);
  }

  const t0 = new Date(on.timestamp).getTime();
  deviceUptimeTimers[safe] = setInterval(() => {
    document.getElementById(`uptime-${safe}`).innerText =
      formatDuration(Math.floor((Date.now() - t0) / 1000));
  }, 1000);
}



// Utility to turn an IP (or any string) into a safe DOM-ID fragment
function sanitizeId(str) {
  return (str || '').replace(/[^a-zA-Z0-9]/g, '_');
}

function fetchDeviceData() {
  const region = document.getElementById('region').value;
  fetch(`http://localhost/api/regions/details/${region}`)
    .then(r => r.json())
    .then(d => fetchDeviceHistory(d.details))
    .catch(console.error);
}

function fetchDeviceHistory(details) {
  fetch(`http://localhost/api/devices/history`)
    .then(r => r.json())
    .then(historyData => {
      populateDeviceTable(details, historyData);
      window.deviceHistoryData = historyData;
    })
    .catch(console.error);
}

function populateDeviceTable(details, historyData) {
  const Devices = [];
  const tbody = document.querySelector('#device-table tbody');
  tbody.innerHTML = '';

  const devices = [];
  ['cameras', 'archivers', 'controllers', 'servers', 'pcDetails', 'DBDetails'].forEach(type => {
    (details[type] || []).forEach(dev => {
      const ip = dev.ip_address;
      const safe = sanitizeId(ip);
      // const name      = dev[type.slice(0,-1) + 'name'] || 'Unknown';
      const name = dev.hostname || dev.pc_name || dev[type.slice(0, -1) + 'name'] || dev.name || dev.device_name || dev.ip_address || 'Unknown';
      const category = type.slice(0, -1).toUpperCase();
      const rawHist = historyData[ip] || [];
      const city = dev.city || 'Unknown';
      const hist = filterHistoryForDisplay(rawHist, category);
      const lastRaw = rawHist[rawHist.length - 1]?.status || 'Unknown';
      // if last raw Offline but <5min, treat Online
      let status = lastRaw;
      if (lastRaw === 'Offline' && ((Date.now() - new Date(rawHist[rawHist.length - 1].timestamp)) / 1000) < 300) {
        status = 'Online';
      }
      const downCount = hist.filter(e => e.status === 'Offline').length;

      // devices.push({ ip, safe, name, category, rawHist, hist, status, downCount,city  });
      devices.push({ ip, safe, name, category, rawHist, hist, status, downCount, city, remark: dev.remark || '' });

    });
  });

  // sort by ongoing ≥5min offline first, then by downCount desc
  devices.sort((a, b) => {
    const now = Date.now();
    const aLast = a.hist[a.hist.length - 1], bLast = b.hist[b.hist.length - 1];
    const aOff = aLast?.status === 'Offline' ? (now - new Date(aLast.timestamp)) / 1000 : 0;
    const bOff = bLast?.status === 'Offline' ? (now - new Date(bLast.timestamp)) / 1000 : 0;
    if ((aOff >= 300) !== (bOff >= 300)) return aOff >= 300 ? -1 : 1;
    return b.downCount - a.downCount;
  });

  devices.forEach((d, i) => {
    const row = tbody.insertRow();

    // row.classList.add(d.status==='Online' ? 'status-online' : 'status-offline');

    if (d.status === 'Offline') {
      row.classList.add('row-offline');
    } else if (d.status === 'Online') {
      row.classList.add('row-online');
    } else {
      // Optional: handle unknown or other cases
      row.classList.add('row-repair');
    }


    const displayCategory =
  d.category === 'PCDETAIL' ? 'Desktop'
  : d.category === 'DBDETAIL' ? 'DB Server'
  : d.category;


    //     row.innerHTML = `
    // <td>${i+1}</td>
    // <td><span id="ip-${d.safe}" class="copy-text" onclick="copyToClipboard('ip-${d.safe}')">${d.ip}</span></td>
    // <td><span id="name-${d.safe}" class="copy-text" onclick="copyToClipboard('name-${d.safe}')">${d.name}</span></td>
    // <td>${d.category}</td>
    // <td id="uptime-${d.safe}">0h/0m/0s</td>
    // <td id="downtime-count-${d.safe}">${d.downCount}</td>
    // <td id="downtime-${d.safe}">0h/0m/0s</td>
    // <td><button class="history-btn" onclick="openDeviceHistory('${d.ip}','${d.name}','${d.category}')">View History</button></td>
    // <td id="remark-${d.safe}">–</td>
    // `;


    row.innerHTML = `
<td>${i + 1}</td>
<td><span id="ip-${d.safe}" class="copy-text" onclick="copyToClipboard('ip-${d.safe}')">${d.ip}</span></td>
<td><span id="name-${d.safe}" class="copy-text" onclick="copyToClipboard('name-${d.safe}')">${d.name}</span></td>
<td data-category="${d.category}">${displayCategory}</td>
<td>${d.city}</td>
<td id="uptime-${d.safe}">0h/0m/0s</td>
<td id="downtime-count-${d.safe}">${d.downCount}</td>
<td id="downtime-${d.safe}">0h/0m/0s</td>
<td><button class="history-btn" onclick="openDeviceHistory('${d.ip}','${d.name}','${d.category}')">View History</button></td>
<td id="remark-${d.safe}" data-city="${d.city}">–</td>
`;



    // show policy tooltip on hover for rows with explicit "Not accessible" remark
    // modern hover message for "Not accessible" rows
    if (d.remark && /not\s+access/i.test(d.remark)) {
      row.classList.add('row-not-accessible');

      // create tooltip element
      const tooltip = document.createElement("div");
      tooltip.className = "modern-tooltip";
      tooltip.textContent = "Due to Network policy, this camera is Not accessible";
      row.appendChild(tooltip);
    }


    if (d.status === 'Online') startUptime(d.ip, d.hist, d.category);
    else startDowntime(d.ip, d.hist, d.category);

    updateRemarks(d.ip, d.hist, d.status, d.downCount);
  });



  // ✅ Add this block AFTER `devices.forEach(...)` inside populateDeviceTable
  // const cityFilter = document.getElementById('cityFilter');
  // if (cityFilter) {
  //   const uniqueCities = [...new Set(devices.map(dev => dev.city).filter(Boolean))].sort();
  //   cityFilter.innerHTML = '<option value="all">All Cities</option>';
  //   uniqueCities.forEach(city => {
  //     const option = document.createElement('option');
  //     option.value = city;
  //     option.textContent = city;
  //     cityFilter.appendChild(option);
  //   });
  // }


  const cityFilter = document.getElementById('cityFilter');
  if (cityFilter) {
    const uniqueCities = [...new Set(devices.map(dev => dev.city).filter(Boolean))].sort();

    // Build dropdown from scratch, ensure ALL option is uppercase and selected
    cityFilter.innerHTML = '';
    const allOpt = document.createElement('option');
    allOpt.value = 'ALL';            // use 'ALL' (uppercase) to match filterData()
    allOpt.textContent = 'All Cities';
    allOpt.selected = true;          // explicitly mark selected so it shows on first render
    cityFilter.appendChild(allOpt);

    uniqueCities.forEach(city => {
      const option = document.createElement('option');
      option.value = city;
      option.textContent = city;
      cityFilter.appendChild(option);
    });

    // Force value + trigger change so UI and any listeners update immediately
    cityFilter.value = 'ALL';
    cityFilter.dispatchEvent(new Event('change'));
  }

  filterData();


}

function filterHistoryForDisplay(hist, category) {
  if (category === 'SERVER') return hist.slice();

  const out = [];

  let lastOff = null;
  hist.forEach(e => {
    if (e.status === 'Offline') lastOff = e;
    else if (e.status === 'Online' && lastOff) {
      const diff = (new Date(e.timestamp) - new Date(lastOff.timestamp)) / 1000;
      if (diff >= 300) out.push(lastOff, e);

      lastOff = null;
    }
  });

  if (lastOff) {

    const diff = (Date.now() - new Date(lastOff.timestamp)) / 1000;
    if (diff >= 300) out.push(lastOff);

  }

  return out.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
}

function startUptime(ip, hist) {
  const safe = sanitizeId(ip);
  clearInterval(deviceDowntimeTimers[safe]);
  const on = hist.filter(e => e.status === 'Online').pop();
  if (!on) return;
  const t0 = new Date(on.timestamp).getTime();
  deviceUptimeTimers[safe] = setInterval(() => {
    document.getElementById(`uptime-${safe}`).innerText = formatDuration(Math.floor((Date.now() - t0) / 1000));
  }, 1000);
}

// function startDowntime(ip, hist) {
//   const safe = sanitizeId(ip);
//   clearInterval(deviceUptimeTimers[safe]);
//   const off = hist.filter(e => e.status==='Offline').pop();
//   if (!off) return;
//   const t0 = new Date(off.timestamp).getTime();
//   deviceDowntimeTimers[safe] = setInterval(() => {
//     const secs = Math.floor((Date.now()-t0)/1000);
//     document.getElementById(`downtime-${safe}`).innerText = formatDuration(secs);
//     document.getElementById(`downtime-count-${safe}`).innerText = hist.filter(e => e.status==='Offline').length;
//     updateRemarks(ip, hist, null, null);
//   }, 1000);
// }

function updateRemarks(ip, hist, forcedStatus, forcedCount) {
  const safe = sanitizeId(ip);
  // Determine status
  let status = forcedStatus;
  if (!status) {
    const last = hist[hist.length - 1]?.status || 'Unknown';
    status = last === 'Offline' && ((Date.now() - new Date(hist[hist.length - 1].timestamp)) / 1000) < 300
      ? 'Online' : last;
  }
  const count = forcedCount ?? hist.filter(e => e.status === 'Offline').length;
  const el = document.getElementById(`remark-${safe}`);
  if (!el) return;
  if (status === 'Offline') {
    el.innerText = count > 0 ? 'Device is Offline, needs check.' : 'Device is Offline.';
  } else if (status === 'Online') {
    el.innerText = count > 0
      ? `Device is Online, had ${count} downtime events ≥5 min.`
      : 'Device is Online.';
  } else {
    el.innerText = 'Device status unknown.';
  }
}

function formatDuration(sec) {
  const d = Math.floor(sec / 86400), h = Math.floor((sec % 86400) / 3600),
    m = Math.floor((sec % 3600) / 60), s = Math.round(sec % 60);
  const parts = [];
  if (d) parts.push(`${d}d`);
  if (h) parts.push(`${h}h`);
  if (m) parts.push(`${m}m`);
  if (s || !parts.length) parts.push(`${s}s`);
  return parts.join('/');
}

function openDeviceHistory(ip, name, category) {
  const raw = window.deviceHistoryData[ip] || [];
  const hist = filterHistoryForDisplay(raw, category);
  displayDeviceHistory(ip, name, category, hist);
  document.getElementById('device-history-modal').style.display = 'block';
}



function displayDeviceHistory(ip, name, category, hist) {
  const header = document.getElementById('device-history-header');
  const container = document.getElementById('device-history');
  header.innerHTML = `
    <h2 style="color: var(--yellow); font-size: 24px;">${name} <span style="font-size:16px;">(${ip})</span></h2>
    <hr style="margin: 10px 0; border-color: var(--gray);">
  `;

  if (!hist.length) {
    container.innerHTML = `<p style="font-style: italic; color: #777;">No downtime ≥5 min in history.</p>`;
    return;
  }

  let html = `
    <div class="scrollable-history-table">
      <table class="history-table">
        <thead>
          <tr>
            <th>Sr.No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Duration</th>
          </tr>
        </thead>
        <tbody>
  `;

  let idx = 1;
  let lastOff = null;

  hist.forEach(e => {
    const t = new Date(e.timestamp);
    const date = t.toLocaleDateString();
    const day = t.toLocaleString('en-US', { weekday: 'long' });
    const time = t.toLocaleTimeString();
    let dur = '-';

    if (e.status === 'Offline') {
      if (!lastOff) {
        lastOff = e.timestamp;
        html += `
          <tr>
            <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
            <td class="status-offline">${e.status}</td><td>${dur}</td>
          </tr>`;
      }
    } else if (e.status === 'Online') {
      if (lastOff) {
        const diff = (new Date(e.timestamp) - new Date(lastOff)) / 1000;
        dur = formatDuration(diff);
        const offTime = new Date(lastOff);
        const offDate = offTime.toLocaleDateString();
        const offDay = offTime.toLocaleString('en-US', { weekday: 'long' });
        const offClock = offTime.toLocaleTimeString();

        html += `
          <tr>
            <td>${idx++}</td><td>${offDate}</td><td>${offDay}</td><td>${offClock}</td>
            <td class="status-offline">Offline</td><td>${dur}</td>
          </tr>
          <tr>
            <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
            <td class="status-online">${e.status}</td><td>${formatDuration(0)}</td>
          </tr>`;

        lastOff = null;
      } else {
        html += `
          <tr>
            <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
            <td class="status-online">${e.status}</td><td>${dur}</td>
          </tr>`;
      }
    }
  });

  if (lastOff) {
    const t = new Date(lastOff);
    const date = t.toLocaleDateString();
    const day = t.toLocaleString('en-US', { weekday: 'long' });
    const time = t.toLocaleTimeString();
    const now = Date.now();
    const dur = formatDuration((now - new Date(lastOff)) / 1000);

    html += `
      <tr>
        <td>${idx++}</td><td>${date}</td><td>${day}</td><td>${time}</td>
        <td class="status-offline">Offline</td><td>${dur}</td>
      </tr>`;
  }

  html += `</tbody></table></div>`;
  container.innerHTML = html;
}




function closeHistoryModal() {
  document.getElementById('device-history-modal').style.display = 'none';
}

function exportDeviceTableToExcel() {
  const table = document.getElementById("device-table");
  const workbook = XLSX.utils.table_to_book(table, { sheet: "Device Table" });
  XLSX.writeFile(workbook, "Device_Table.xlsx");
}


function exportDeviceHistoryToExcel() {
  const historyTable = document.querySelector("#device-history-modal table");
  if (!historyTable) {
    alert("Please open a device's history first.");
    return;
  }
  const workbook = XLSX.utils.table_to_book(historyTable, { sheet: "Device History" });
  XLSX.writeFile(workbook, "Device_History.xlsx");
}



// function filterData() {
//   const rawTypeSel = document.getElementById('device-type').value.toUpperCase();
//   // normalize select values to match the Category text in the table
//   const typeSel = rawTypeSel === 'PCDETAILS' ? 'PCDETAIL'
//                 : rawTypeSel === 'DBDETAILS' ? 'DBDETAIL'
//                 : rawTypeSel;

//   const remarkSel = document.getElementById('remark-filter').value.toUpperCase();
//   const citySel   = document.getElementById('cityFilter')?.value.toUpperCase() || "ALL";
//   const searchTxt = document.getElementById('search-input').value.toUpperCase();

//   document.querySelectorAll('#device-table tbody tr').forEach(r => {
//     const ip     = r.cells[1].textContent.toUpperCase();
//     const name   = r.cells[2].textContent.toUpperCase();
//     const type   = r.cells[3].textContent.toUpperCase(); // e.g., CONTROLLER, PCDETAIL, DBDETAIL
//     const city   = r.cells[4].textContent.toUpperCase();
//     const remark = r.cells[9]?.textContent.toUpperCase();

//     const matchesType   = (typeSel === 'ALL' || type === typeSel);
//     const matchesRemark = (remarkSel === 'ALL' || remark.includes(remarkSel));
//     const matchesCity   = (citySel === 'ALL' || city === citySel);
//     const matchesSearch = (ip.includes(searchTxt) || name.includes(searchTxt));

//     r.style.display = matchesType && matchesRemark && matchesCity && matchesSearch ? '' : 'none';
//   });
// }

// new 

function filterData() {
  // Read UI selections
  const rawTypeSel = (document.getElementById('device-type')?.value || '');
  const rt = rawTypeSel.toUpperCase();

  // Normalize displayed device-type values to the internal data-category values
  let typeSel;
  if (rt === 'DESKTOP') typeSel = 'PCDETAIL';
  else if (rt === 'DB SERVER' || rt === 'DBSERVER') typeSel = 'DBDETAIL';
  else typeSel = rt; // e.g., ALL, CONTROLLER, CAMERA, SERVER, ARCHIVER

  const remarkSel = (document.getElementById('remark-filter')?.value || '').toUpperCase();
  const cityFilterEl = document.getElementById('cityFilter');
  const prevCityVal = cityFilterEl?.value || 'ALL';
  const searchTxt = (document.getElementById('search-input')?.value || '').toUpperCase();

  // Collect rows
  const tbodyRows = Array.from(document.querySelectorAll('#device-table tbody tr'));

  // First: figure out which cities are possible given type+remark+search (preserve original casing)
  const possibleCitiesMap = new Map(); // key: UPPERCASE city -> value: original city text
  tbodyRows.forEach(r => {
    const ip = r.cells[1].textContent.toUpperCase();
    const name = r.cells[2].textContent.toUpperCase();

    const typeCell = r.cells[3];
    const typeVal = (typeCell && typeCell.getAttribute('data-category'))
      ? typeCell.getAttribute('data-category').toUpperCase()
      : typeCell.textContent.toUpperCase();

    const cityOriginal = (r.cells[4].textContent || '').trim();
    const cityUp = cityOriginal.toUpperCase();
    const remark = (r.cells[9]?.textContent || '').toUpperCase();

    const matchesType = (typeSel === 'ALL' || typeVal === typeSel);
    const matchesRemark = (remarkSel === 'ALL' || remark.includes(remarkSel));
    const matchesSearch = (ip.includes(searchTxt) || name.includes(searchTxt));

    if (matchesType && matchesRemark && matchesSearch && cityOriginal) {
      possibleCitiesMap.set(cityUp, cityOriginal);
    }
  });

  // Sort possible cities (preserve case)
  const possibleCities = Array.from(possibleCitiesMap.values()).sort((a, b) => a.localeCompare(b));

  // Rebuild the city dropdown so it contains only available cities + All Cities
  if (cityFilterEl) {
    const prev = prevCityVal;
    cityFilterEl.innerHTML = '';

    const allOpt = document.createElement('option');
    allOpt.value = 'ALL';
    allOpt.textContent = 'All Cities';
    cityFilterEl.appendChild(allOpt);

    possibleCities.forEach(cityName => {
      const opt = document.createElement('option');
      opt.value = cityName;
      opt.textContent = cityName;
      cityFilterEl.appendChild(opt);
    });

    // Restore previous selection if still valid; else choose ALL
    const restored = (prev && (prev.toUpperCase() === 'ALL' || possibleCitiesMap.has(prev.toUpperCase()))) ? prev : 'ALL';
    cityFilterEl.value = restored;
  }

  // Now apply visibility of rows using the (possibly updated) city selection
  const citySel = (document.getElementById('cityFilter')?.value || 'ALL').toUpperCase();

  tbodyRows.forEach(r => {
    const ip = r.cells[1].textContent.toUpperCase();
    const name = r.cells[2].textContent.toUpperCase();

    const typeCell = r.cells[3];
    const type = (typeCell && typeCell.getAttribute('data-category'))
      ? typeCell.getAttribute('data-category').toUpperCase()
      : typeCell.textContent.toUpperCase();

    const city = (r.cells[4].textContent || '').toUpperCase();
    const remark = (r.cells[9]?.textContent || '').toUpperCase();

    const matchesType   = (typeSel === 'ALL' || type === typeSel);
    const matchesRemark = (remarkSel === 'ALL' || remark.includes(remarkSel));
    const matchesCity   = (citySel === 'ALL' || city === citySel);
    const matchesSearch = (ip.includes(searchTxt) || name.includes(searchTxt));

    r.style.display = (matchesType && matchesRemark && matchesCity && matchesSearch) ? '' : 'none';
  });
}




function copyToClipboard(id) {
  const el = document.getElementById(id);
  if (!el) return;

  const text = el.innerText;

  if (navigator.clipboard && window.isSecureContext) {
    navigator.clipboard.writeText(text)
      .then(() => showToast(`Copied: ${text}`))
      .catch(err => console.error("Clipboard error:", err));
  } else {
    // fallback
    const textarea = document.createElement("textarea");
    textarea.value = text;
    textarea.style.position = "fixed";  // avoid scrolling
    document.body.appendChild(textarea);
    textarea.focus();
    textarea.select();
    try {
      document.execCommand("copy");
      showToast(`Copied: ${text}`);
    } catch (err) {
      console.error("Fallback copy failed", err);
    }
    document.body.removeChild(textarea);
  }
}


// document.addEventListener('DOMContentLoaded', () => {
//   ['region', 'device-type', 'remark-filter'].forEach(id => {
//     document.getElementById(id)?.addEventListener('change', id === 'region' ? fetchDeviceData : filterData);
//   });

//   document.getElementById('search-input')?.addEventListener('input', filterData);

//   // ✅ Add cityFilter event
//   document.getElementById('cityFilter')?.addEventListener('change', filterData);

//   fetchDeviceData();
// });


document.addEventListener('DOMContentLoaded', () => {
  if (Notification.permission !== 'granted') {
    Notification.requestPermission();
  }

  ['region', 'device-type', 'remark-filter'].forEach(id => {
    document.getElementById(id)?.addEventListener('change', id === 'region' ? fetchDeviceData : filterData);
  });

  document.getElementById('search-input')?.addEventListener('input', filterData);
  document.getElementById('cityFilter')?.addEventListener('change', filterData);

  fetchDeviceData();
});

function showToast(message) {
  const toast = document.getElementById("toast");
  toast.textContent = message;
  toast.className = "toast show";
  setTimeout(() => {
    toast.className = toast.className.replace("show", "");
  }, 2500);
}

function copyToClipboard(elementId) {
  const text = document.getElementById(elementId)?.innerText;
  if (text) {
    navigator.clipboard.writeText(text)
      .then(() => showToast(`Copied: ${text}`))
      .catch(err => console.error("Failed to copy:", err));
  }
}
















