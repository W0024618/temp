
// src/components/FloorDetailsPage.jsx
import React, { useState } from 'react';
import { Container, Row, Col, Card, Table, Form } from 'react-bootstrap';

export default function FloorDetailsPage({ floorData = [] }) {
  const [search, setSearch] = useState('');

  if (!floorData.length) {
    return <p className="text-center mt-4 text-white">No floor details available.</p>;
  }

  // Sort floors descending by total occupants
  const sortedFloorData = [...floorData].sort((a, b) => b.total - a.total);

  return (
    <Container fluid className="py-4">
      <style>{`
        .search-input::placeholder { color: #ffffff !important; opacity: 0.6; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-thumb { background-color: #444; border-radius: 4px; }
        ::-webkit-scrollbar-track { background-color: #1c1c1c; }
        .dark-row-even { background-color: #2a2a2a !important; color: #fff !important; }
        .dark-row-odd  { background-color: #1c1c1c !important; color: #fff !important; }
        th, td { border: 1px solid #444 !important; }
      `}</style>

      {/* Search Input */}
      <Form.Group className="mb-3" controlId="search" style={{ maxWidth: 300 }}>
        <Form.Control
          type="text"
          placeholder="Search by Name or ID"
          value={search}
          onChange={(e) => setSearch(e.target.value.toLowerCase())}
          className="search-input"
          style={{ backgroundColor: '#1c1c1c', color: '#fff', border: '1px solid #FFC72C' }}
        />
      </Form.Group>

      <Row xs={1} md={2} lg={3} className="g-4">
        {sortedFloorData.map(({ floor, total, occupants }) => {
          const filtered = occupants.filter(
            (emp) =>
              emp.ObjectName1?.toLowerCase().includes(search) ||
              emp.EmployeeID?.toString().includes(search)
          );

          if (search && filtered.length === 0) return null;

          return (
            <Col key={floor}>
              <Card className="h-100 shadow-sm" style={{ border: '2px solid #FFC72C' }}>
                <Card.Header
                  className="fw-bold"
                  style={{ backgroundColor: '#FFC72C', color: '#1c1c1c' }}
                >
                  {floor} â€” Total: {filtered.length}
                </Card.Header>
                <Card.Body
                  style={{
                    overflowY: 'auto',
                    maxHeight: 600,
                    backgroundColor: '#1c1c1c',
                    padding: 0
                  }}
                >
                  <Table
                    size="sm"
                    className="mb-0"
                    striped
                    hover
                    responsive
                    style={{ color: '#fff' }}
                  >
                    <thead style={{ backgroundColor: '#2a2a2a', color: '#FFC72C' }}>
                      <tr>
                        <th>Name</th>
                        <th>Emp ID</th>
                        <th>Swipe Time</th>
                        <th>Date</th>
                        <th>Type</th>
                        <th>Door Name</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filtered.map((emp, idx) => (
                        <tr
                          key={`${emp.EmployeeID}-${idx}`}
                          className={idx % 2 === 0 ? 'dark-row-even' : 'dark-row-odd'}
                        >
                          <td>{emp.ObjectName1}</td>
                          <td>{emp.EmployeeID}</td>
                          <td>{emp.Swipe_Time}</td>
                          <td>{emp.Dateonly}</td>
                          <td>{emp.PersonnelType}</td>
                          <td>{emp.Door}</td>
                        </tr>
                      ))}
                    </tbody>
                  </Table>
                </Card.Body>
              </Card>
            </Col>
          );
        })}
      </Row>
    </Container>
  );
}
