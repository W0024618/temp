

// src/pages/Dashboard.jsx
import React, { useEffect, useState } from 'react';
import { Container, Box, Typography } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { useTheme, useMediaQuery } from '@mui/material';

import CostaRicaFlag from '../assets/flags/costa-rica.png';
import ArgentinaFlag from '../assets/flags/argentina.png';
import MexicoFlag from '../assets/flags/mexico.png';
import PeruFlag from '../assets/flags/peru.png';
import BrazilFlag from '../assets/flags/brazil.png';
import PanamaFlag from '../assets/flags/panama.png';

import Header from '../components/Header';
import SummaryCard from '../components/SummaryCard';
import CompositeChartCard from '../components/CompositeChartCard';
import LineChartCard from '../components/LineChartCard';
import PieChartCard from '../components/PieChartCard';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';

import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import seatCapacities from '../data/seatCapacities';
import buildingCapacities from '../data/buildingCapacities';

const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'AR.Cordoba': 'Argentina',
  'MX.Mexico City': 'Mexico',
  'PE.Lima': 'Peru',
  'BR.Sao Paulo': 'Brazil',
  'PA.Panama City': 'Panama'
};

const palette15 = [
  '#FFC107', '#E57373', '#4CAF50', '#FFEB3B', '#FFD666',
  '#D84315', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

export default function Dashboard() {
  const { data: liveData, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const [data, setData] = useState(null);
  const [mode, setMode] = useState('live');
  const navigate = useNavigate();

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.between('sm', 'md'));
  const isDesktop = useMediaQuery(theme.breakpoints.up('md'));

  useEffect(() => {
    if (mode === 'live' && liveData) setData(liveData);
  }, [liveData, mode]);

  const handleSnapshot = (snapshotJson) => {
    setData(snapshotJson);
    setMode('snapshot');
  };

  const handleLive = () => {
    setMode('live');
    setData(liveData);
  };

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  if (loading) return (
    <Box sx={{
      position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh',
      bgcolor: 'rgba(0,0,0,0.85)', zIndex: 9999,
      display: 'flex', justifyContent: 'center', alignItems: 'center'
    }}>
      <LoadingSpinner />
    </Box>
  );

  if (error) return (
    <Box width="100vw" py={4}>
      <Typography color="error" align="center">
        Error loading live data
      </Typography>
    </Box>
  );

  const regions = data?.realtime || {};
  const flagMap = {
    'CR.Costa Rica Partition': CostaRicaFlag,
    'AR.Cordoba': ArgentinaFlag,
    'MX.Mexico City': MexicoFlag,
    'PE.Lima': PeruFlag,
    'BR.Sao Paulo': BrazilFlag,
    'PA.Panama City': PanamaFlag,
  };

  const partitions = partitionList.map(name => {
    const key = Object.keys(regions).find(k => k.includes(name));
    const p = key ? regions[key] : {};
    return {
      name,
      total: p.total || 0,
      Employee: p.Employee || 0,
      Contractor: p.Contractor || 0,
      floors: p.floors || {},
      flag: flagMap[name],
    };
  }).sort((a, b) => b.total - a.total);

  const todayTot = data?.today?.total ?? 0;
  const todayEmp = data?.today?.Employee ?? 0;
  const todayCont = data?.today?.Contractor ?? 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);
  const crPartition = partitions.find(p => p.name === 'CR.Costa Rica Partition');
  const arPartition = partitions.find(p => p.name === 'AR.Cordoba');
  const smallOnes = partitions.filter(p =>
    ['MX.Mexico City', 'BR.Sao Paulo', 'PE.Lima', 'PA.Panama City'].includes(p.name)
  );

  return (
    <>
      <Header onSnapshot={handleSnapshot} onLive={handleLive} />

      {mode === 'snapshot' && data?.timestamp && (
        <Box sx={{ background: '#333', color: '#FFD666', textAlign: 'center', py: 1, borderRadius: 1, mb: 2 }}>
          <Typography variant="body2">
            Viewing historical snapshot for: {new Date(data.timestamp).toLocaleString()}
          </Typography>
        </Box>
      )}

      <Container
        maxWidth={false}
        disableGutters
        sx={{ py: 0, px: { xs: 1, sm: 2, md: 3 }, background: 'linear-gradient(135deg, #0f0f0f, #1c1c1c)', color: '#f5f5f5' }}
      >

        {/* Top Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={2} mb={2} justifyContent="center">
          {[
            { title: "Today's Total Headcount", value: todayTot, icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />, border: '#FFB300' },
            { title: "Today's Employees Count", value: todayEmp, icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />, border: '#8BC34A' },
            { title: "Today's Contractors Count", value: todayCont, icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />, border: '#E57373' },
            { title: "Realtime Headcount", value: realtimeTot, icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />, border: '#FFD180' },
            { title: "Realtime Employees Count", value: realtimeEmp, icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />, border: '#AED581' },
            { title: "Realtime Contractors Count", value: realtimeCont, icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />, border: '#E57373' },
          ].map((c, idx) => (
            <Box key={idx} sx={{
              flex: { xs: "1 1 100%", sm: "1 1 48%", md: "1 1 30%", lg: "1 1 15%" },
              minWidth: { xs: "100%", sm: 200 }
            }}>
              <SummaryCard title={c.title} total={c.value} stats={[]} icon={c.icon} sx={{ height: 140, border: `2px solid ${c.border}` }} />
            </Box>
          ))}
        </Box>

        {/* Region Summary Cards */}
        <Box display="flex" flexWrap="wrap" gap={2} mb={2} justifyContent="center">
          {partitions.map((p, index) => (
            <Box key={p.name} sx={{
              flex: { xs: "1 1 100%", sm: "1 1 48%", md: "1 1 30%", lg: "1 1 15%" },
              minWidth: { xs: "100%", sm: 220 }
            }}>
              <SummaryCard
                title={displayNameMap[p.name] || p.name.replace(/^.*\./, '')}
                total={p.total}
                stats={[
                  { label: 'Employees', value: p.Employee, color: '#40E0D0' },
                  { label: 'Contractors', value: p.Contractor, color: 'green' },
                ]}
                sx={{ width: '100%', border: `2px solid ${palette15[index % palette15.length]}` }}
                icon={<Box component="img" src={p.flag} sx={{ width: 48, height: 32 }} />}
              />
            </Box>
          ))}
        </Box>

        {/* Detail Widgets */}
        <Box display="flex" flexWrap="wrap" gap={2} justifyContent="center">
          {/* Costa Rica */}
          <Box sx={widgetBoxStyle('#FFE599', isMobile)}>
            {crPartition.total === 0 ? <NoData text="Costa Rica" /> :
              <CompositeChartCard
                title="Costa Rica"
                data={Object.entries(crPartition.floors).map(([f, c]) => ({ name: f.trim(), headcount: c, capacity: buildingCapacities[f.trim()] || 0 }))}
                barColor={palette15[0]} lineColor={palette15[1]} height={350}
              />}
          </Box>

          {/* Argentina */}
          <Box sx={widgetBoxStyle('#FFE599', isMobile)}>
            {arPartition.total === 0 ? <NoData text="Argentina" /> :
              <LineChartCard
                title="Argentina"
                data={Object.entries(arPartition.floors).map(([f, c]) => ({ name: f.trim(), headcount: c, capacity: seatCapacities[`Argentina-${f.trim()}`] || 0 }))}
                totalCapacity={450} lineColor1={palette15[2]} lineColor2={palette15[3]} height={350}
              />}
          </Box>

          {/* Pie Chart */}
          <Box sx={widgetBoxStyle('#FFE599', isMobile)}>
            <PieChartCard
              title="Latin America"
              data={smallOnes.map(p => ({ name: displayNameMap[p.name], value: p.total, emp: p.Employee, cont: p.Contractor }))}
              colors={[palette15[4], palette15[5], palette15[6], palette15[7]]}
              height={350} showZeroSlice
              totalSeats={smallOnes.reduce((sum, p) => sum + seatCapacities[displayNameMap[p.name]], 0)}
            />
          </Box>
        </Box>



        
      </Container>

      <Footer />
    </>
  );
}

const widgetBoxStyle = (borderColor, isMobile) => ({
  flex: { xs: "1 1 100%", sm: "1 1 48%", md: "1 1 32%" },
  minWidth: isMobile ? "100%" : 280,
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
  overflow: 'hidden',
  transition: 'transform 0.3s',
  '&:hover': { transform: 'scale(1.02)' }
});

function NoData({ text }) {
  return (
    <Typography align="center" sx={{ py: 4, color: 'white' }}>
      No realtime employee data in {text}
    </Typography>
  );
}
