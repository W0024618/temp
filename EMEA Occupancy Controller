let check below EAMA Occupancy Controller and fix this issue carefully..
same Compare both comented and uncommented code and when  "Floor": "Out of office" then remove thier cpount and remove them from live summary carefully

http://localhost:3005/api/occupancy/live-summary

 },
  "details": [
    {
      "LocaleMessageTime": "2025-08-13T06:47:45.000Z",
      "Dateonly": "2025-08-13",
      "Swipe_Time": "06:47:45",
      "EmployeeID": "86140423",
      "PersonGUID": "7AF6EB75-1162-4A6B-B12C-C842DB112C90",
      "ObjectName1": "Tomasevic, Kazimez",
      "Door": "EMEA_LT_VNO_GAMA_1st Flr_Parking",
      "PersonnelType": "Contractor",
      "CardNumber": "619063",
      "Text5": "Vilnius - Technopolis",
      "PartitionName2": "LT.Vilnius",
      "AdmitCode": "Admit",
      "Direction": "OutDirection",
      "Floor": "Out of office"
    },
    {
      "LocaleMessageTime": "2025-08-13T00:00:59.000Z",
      "Dateonly": "2025-08-13",
      "Swipe_Time": "00:00:59",
      "EmployeeID": "325026",
      "PersonGUID": "4BEBC337-185E-46C7-8EEB-DAE533F71577",
      "ObjectName1": "Atkocius, Karolis",
      "Door": "EMEA_LT_VNO_GAMA_EMEA_5th Flr_Stairway",
      "PersonnelType": "Employee",
      "CardNumber": "234189",
      "Text5": "Vilnius - Gama Business Center",
      "PartitionName2": "LT.Vilnius",
      "AdmitCode": "Admit",
      "Direction": "OutDirection",
      "Floor": "Out of office"
    },
    {





// C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js

const service = require('../services/occupancy.service');
 const doorMap = require('../utils/doorMap'); 
//  const normalize  = name => name.trim();        // simple normalizer

 const normalize = s =>
   s
     .trim()
     .toLowerCase()
     .replace(/[^a-z0-9]+/g, ' ')   // non-alphanum → space
     .replace(/\s+/g, ' ')          // collapse multi-spaces
     .trim();

/**
 * Returns true if this PersonnelType counts as Employee.
 * Everything else (including blank) counts as Contractor.
 */
function isEmployeeType(pt) {
  return pt === 'Employee'
      || pt === 'Terminated Employee'
      || pt === 'Terminated Personnel';
}

/**
 * Look up floor for a given record by matching door + partition.
 */

function lookupFloor(partition, door, direction, unmappedSet) {
  const normDoor = normalize(door);
  // 1) try exact (post-normalization)
  let entry = doorMap.find(d =>
    d.partition === partition &&
    normalize(d.door) === normDoor
  );
  // 2) fallback: partial match if exact fails
  if (!entry) {
    entry = doorMap.find(d =>
      d.partition === partition &&
      normalize(d.door).includes(normDoor)
    );
  }
  if (!entry) {
    unmappedSet.add(`${partition} | ${door}`);
    return null;
  }
  return direction === 'InDirection'
    ? entry.inDirectionFloor
    : entry.outDirectionFloor;
}





exports.getLiveOccupancy = async (req, res) => {
  try {
    const data = await service.fetchLiveOccupancy();
    res.json({ success: true, count: data.length, data });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: 'Live occupancy fetch failed' });
  }
};






// exports.getLiveSummary = async (req, res) => {
//   try {
//     const swipes = await service.fetchLiveOccupancy();

//     // 1. TODAY’S HEADCOUNT: first swipe per person
//     const firstByPerson = {};
//     swipes.forEach(r => {
//       const prev = firstByPerson[r.PersonGUID];
//       const t = new Date(r.LocaleMessageTime).getTime();
//       if (!prev || t < new Date(prev.LocaleMessageTime).getTime()) {
//         firstByPerson[r.PersonGUID] = r;
//       }
//     });
//     const todayRecs = Object.values(firstByPerson);
//     const today = { total: 0, Employee: 0, Contractor: 0 };
//     todayRecs.forEach(r => {
//       today.total++;
//       if (isEmployeeType(r.PersonnelType)) today.Employee++;
//       else today.Contractor++;
//     });

//     // 2. REAL-TIME: last swipe per person, only InDirection
//     const lastByPerson = {};
//     swipes.forEach(r => {
//       const prev = lastByPerson[r.PersonGUID];
//       const t = new Date(r.LocaleMessageTime).getTime();
//       if (!prev || t > new Date(prev.LocaleMessageTime).getTime()) {
//         lastByPerson[r.PersonGUID] = r;
//       }
//     });

//     const realtime = {};
//     const unmappedDoors = new Set();
//     Object.values(lastByPerson).forEach(r => {
//       // if (r.Direction !== 'InDirection') return;
//      // only evict if the mapped outDirectionFloor is "Out of office"
//      if (r.Direction === 'OutDirection') {
//        const floor = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmappedDoors);
//        if (floor === 'Out of office' || floor?.trim() === 'Out of office') {
//          return; // true exit → skip
//        }
//      }

//       const p = r.PartitionName2;
//       // initialize per-partition counters
//       if (!realtime[p]) {
//         realtime[p] = { total: 0, Employee: 0, Contractor: 0, floors: {} };
//       }
//       realtime[p].total++;
//       if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
//       else realtime[p].Contractor++;

//       const floor = lookupFloor(p, r.Door, r.Direction, unmappedDoors) || 'Unmapped';
//       realtime[p].floors[floor] = (realtime[p].floors[floor] || 0) + 1;
//     });

//     if (unmappedDoors.size) {
//       console.warn('Unmapped doors:\n' + Array.from(unmappedDoors).join('\n'));
//     }

//     return res.json({
//       success: true,
//       today,
//       realtime,
//       details: Object.values(lastByPerson)
//     });
//   } catch (err) {
//     console.error(err);
//     return res.status(500).json({ success: false, message: 'Live summary failed' });
//   }
// };





exports.getLiveSummary = async (req, res) => {
  try {
    const swipes = await service.fetchLiveOccupancy();

    // 1. TODAY’S HEADCOUNT: first swipe per person
    const firstByPerson = {};
    swipes.forEach(r => {
      const prev = firstByPerson[r.PersonGUID];
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!prev || t < new Date(prev.LocaleMessageTime).getTime()) {
        firstByPerson[r.PersonGUID] = r;
      }
    });
    const todayRecs = Object.values(firstByPerson);
    const today = { total: 0, Employee: 0, Contractor: 0 };
    todayRecs.forEach(r => {
      today.total++;
      if (isEmployeeType(r.PersonnelType)) today.Employee++;
      else today.Contractor++;
    });

    // 2. REAL-TIME: last swipe per person (we keep your OutDirection eviction logic)
    const lastByPerson = {};
    swipes.forEach(r => {
      const prev = lastByPerson[r.PersonGUID];
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!prev || t > new Date(prev.LocaleMessageTime).getTime()) {
        lastByPerson[r.PersonGUID] = r;
      }
    });

    const realtime = {};
    const unmappedDoors = new Set();

    Object.values(lastByPerson).forEach(r => {
      // Only evict when the mapped outDirection floor equals "Out of office"
      if (r.Direction === 'OutDirection') {
        const floorCheck = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmappedDoors);
        const fcNorm = floorCheck ? String(floorCheck).trim().toLowerCase() : '';
        if (fcNorm === 'out of office') {
          return; // true exit -> don't count
        }
        // otherwise fall through and count
      }

      const p = r.PartitionName2;
      if (!realtime[p]) {
        realtime[p] = { total: 0, Employee: 0, Contractor: 0, floors: {} };
      }

      realtime[p].total++;
      if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
      else realtime[p].Contractor++;

      const rawFloor = lookupFloor(p, r.Door, r.Direction, unmappedDoors);
      const normFloor = rawFloor ? String(rawFloor).trim() : 'Unmapped';
      realtime[p].floors[normFloor] = (realtime[p].floors[normFloor] || 0) + 1;
    });

    if (unmappedDoors.size) {
      console.warn('Unmapped doors:\n' + Array.from(unmappedDoors).join('\n'));
    }

    // Build enriched details array and attach Floor directly below PartitionName2 in each object
    const details = Object.values(lastByPerson).map(r => {
      const rawFloor = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmappedDoors);
      const floor = rawFloor ? String(rawFloor).trim() : null;

      // Return shape mirrors incoming record fields + Floor
      return {
        ...r,
        Floor: floor
      };
    });

    return res.json({
      success: true,
      today,
      realtime,
      details
    });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ success: false, message: 'Live summary failed' });
  }
};


