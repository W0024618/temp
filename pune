// controllers/employeeController.js
const { getPool } = require('../config/db');

const getEmployees = async (req, res) => {
  console.log('üéØ [GET] /api/employees called');
  try {
    const pool = await getPool();
    console.log('‚úÖ DB pool acquired');

    const result = await pool.request().query(`
      SELECT
        AP.ObjectID AS EmployeeObjID,
        AP.Name AS EmpName,
        CASE WHEN AP.Int1 = 0 THEN AP.Text12 ELSE CAST(AP.Int1 AS NVARCHAR(50)) END AS EmployeeID,
        PT.Name AS PersonnelType,
        AP.Text10 AS Manager_Name,
        AP.Int4 AS Manager_WU_ID,
        -- single image (if any)
        (SELECT TOP 1 AI.Image FROM ACVSCore.Access.Images AI WHERE AI.ParentId = AP.ObjectID) AS Image,
        -- total cards and states via subqueries (avoids GROUP BY)
        (SELECT COUNT(*) FROM ACVSCore.Access.Credential C WHERE C.Name = AP.Name) AS Total_Cards,
        (SELECT COUNT(*) FROM ACVSCore.Access.Credential C
            WHERE C.Name = AP.Name
              AND (C.ExpirationDateTime IS NULL OR C.ExpirationDateTime >= GETDATE())
              AND (C.Disabled IS NULL OR C.Disabled = 0)
              AND (C.Lost IS NULL OR C.Lost = 0)
              AND (C.Stolen IS NULL OR C.Stolen = 0)
        ) AS Active_Cards,
        (SELECT COUNT(*) FROM ACVSCore.Access.Credential C
            WHERE C.Name = AP.Name
              AND C.ExpirationDateTime IS NOT NULL
              AND C.ExpirationDateTime < GETDATE()
        ) AS Expired_Cards,
        AP.Disabled
      FROM ACVSCore.Access.Personnel AP
      LEFT JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = AP.PersonnelTypeID
      ORDER BY AP.Name
    `);

    console.log('‚úÖ Query executed, rows:', result.recordset.length);

    const employees = result.recordset.map(emp => ({
      id:               emp.EmployeeObjID,
      EmpName:          emp.EmpName,
      EmployeeID:       emp.EmployeeID,
      PersonnelType:    emp.PersonnelType,
      Manager_Name:     emp.Manager_Name,
      Manager_WU_ID:    emp.Manager_WU_ID,
      Profile_Disabled: emp.Disabled,
      Total_Cards:      emp.Total_Cards ?? 0,
      Active_Cards:     emp.Active_Cards ?? 0,
      Expired_Cards:    emp.Expired_Cards ?? 0,
      Employee_Status:  (emp.Disabled === 1) ? 'Deactive' : (emp.Active_Cards && emp.Active_Cards > 0 ? 'Active' : 'Deactive'),
      imageUrl:         `/api/employees/${emp.EmployeeObjID}/image`
    }));

    return res.json(employees);
  } catch (err) {
    console.error('‚ùå Error in getEmployees:', err.stack || err);
    return res.status(500).json({
      error: 'Internal Server Error',
      message: err.message
    });
  }
};

module.exports = { getEmployees };








// controllers/employeeLocationController.js
const axios = require('axios');
const sql = require('mssql');
const { getPool } = require('../config/db');
// ... OCCUPANCY_URLS and cache definitions stay the same ...

async function getEmployeeLiveLocation(req, res) {
  const employeeObjId = req.params.id;
  if (!employeeObjId) return res.status(400).json({ error: 'Missing id' });

  // Serve cache if fresh
  const cached = cache[employeeObjId];
  if (cached && Date.now() - cached.ts < CACHE_TTL_MS) {
    return res.json({ cached: true, ...cached.data });
  }

  try {
    const pool = await getPool();

    // Determine input type: numeric -> BigInt, otherwise treat as string and compare casted AP.ObjectID
    let empQuery, request;
    if (/^\d+$/.test(employeeObjId)) {
      request = pool.request().input('objid', sql.BigInt, employeeObjId);
      empQuery = `
        SELECT AP.ObjectID,
               AP.Name AS EmpName,
               AP.Int1,
               AP.Text12
        FROM ACVSCore.Access.Personnel AP
        WHERE AP.ObjectID = @objid
      `;
    } else {
      // non-numeric ID (GUID or text) -> compare using string cast
      request = pool.request().input('objid', sql.NVarChar(100), employeeObjId);
      empQuery = `
        SELECT AP.ObjectID,
               AP.Name AS EmpName,
               AP.Int1,
               AP.Text12
        FROM ACVSCore.Access.Personnel AP
        WHERE CAST(AP.ObjectID AS NVARCHAR(100)) = @objid
      `;
    }

    const empResult = await request.query(empQuery);

    if (!empResult.recordset.length) {
      console.warn(`[getEmployeeLiveLocation] Employee not found: ${employeeObjId}`);
      return res.status(404).json({ error: 'Employee not found' });
    }

    const empRow = empResult.recordset[0];
    const EmployeeID = (empRow.Int1 === 0 || empRow.Int1 === '0' || empRow.Int1 === null)
      ? (empRow.Text12 ? String(empRow.Text12) : '')
      : String(empRow.Int1);

    const empName = empRow.EmpName || '';

    // Fetch occupancy endpoints concurrently (keep existing logic)
    const requests = OCCUPANCY_URLS.map(u => axios.get(u, { timeout: 5000 }).catch(e => ({ error: e, url: u })));
    const responses = await Promise.all(requests);

    let allDetails = [];
    for (const r of responses) {
      if (!r || r.error) {
        console.warn('Occupancy fetch failed for', r && r.url, r && r.error && r.error.message);
        continue;
      }
      if (r.data && Array.isArray(r.data.details)) {
        const src = r.config && r.config.url ? r.config.url : null;
        const annotated = r.data.details.map(d => ({ ...d, __source: src }));
        allDetails.push(...annotated);
      }
    }

    const normalizeString = s => {
      if (!s && s !== 0) return '';
      return String(s).trim().toLowerCase();
    };

    const normEmployeeID = normalizeString(EmployeeID);
    const normEmpName = normalizeString(empName);

    const matches = allDetails.filter(rec => {
      const recEmpId = normalizeString(rec.EmployeeID);
      if (recEmpId && normEmployeeID && recEmpId === normEmployeeID) return true;
      const recName = normalizeString(rec.ObjectName1);
      if (recName && normEmpName && recName === normEmpName) return true;
      return false;
    });

    if (!matches.length) {
      const result = { found: false, message: 'No recent swipe found' };
      cache[employeeObjId] = { ts: Date.now(), data: result };
      return res.json(result);
    }

    // find most recent timestamped record
    function parseRecordTime(rec) {
      if (rec.LocaleMessageTime) return new Date(rec.LocaleMessageTime);
      if (rec.snapshotTime) return new Date(rec.snapshotTime);
      if (rec.Dateonly && rec.Swipe_Time) return new Date(`${rec.Dateonly}T${rec.Swipe_Time}Z`);
      return null;
    }

    let best = null;
    for (const m of matches) {
      const t = parseRecordTime(m);
      if (!t) continue;
      if (!best || t > best.time) best = { rec: m, time: t };
    }

    if (!best) {
      const result = { found: false, message: 'No timestamped swipe found' };
      cache[employeeObjId] = { ts: Date.now(), data: result };
      return res.json(result);
    }

    const r = best.rec;
    const payload = {
      found: true,
      source: r.__source || null,
      partition: r.PartitionName2 || r.Partition || null,
      floor: r.Floor || r.Zone || r.floor || null,
      Zone: r.Zone,
      door: r.Door || null,
      direction: r.Direction || null,
      timestampUTC: r.LocaleMessageTime || r.snapshotTime || (r.Dateonly ? `${r.Dateonly}T${r.Swipe_Time}Z` : null),
      personnelType: r.PersonnelType || null,
      cardNumber: r.CardNumber || null,
      raw: r
    };

    cache[employeeObjId] = { ts: Date.now(), data: payload };
    return res.json(payload);
  } catch (err) {
    console.error('getEmployeeLiveLocation error', err && err.stack || err);
    return res.status(500).json({ error: 'Failed to fetch live location', message: err.message });
  }
}

module.exports = { getEmployeeLiveLocation };










// CurrentLocation.jsx (only the useEffect portion)
useEffect(() => {
  if (!empId) {
    setLoc(null);
    setError('');
    return;
  }

  let cancelled = false;
  setLoading(true);
  setError('');
  setLoc(null);

  axios
    .get(`http://10.199.22.57:5001/api/employees/${encodeURIComponent(empId)}/location`)
    .then((res) => {
      if (cancelled) return;
      setLoc(res.data);
    })
    .catch((err) => {
      if (cancelled) return;
      console.error('Location load error', err?.response || err?.message || err);
      if (err?.response?.status === 404) setError('Employee not found');
      else setError('Failed to load location');
    })
    .finally(() => {
      if (!cancelled) setLoading(false);
    });

  return () => {
    cancelled = true;
  };
}, [empId]);



















// controllers/employeeController.js
const { getPool } = require('../config/db');

const getEmployees = async (req, res) => {
  console.log('üéØ [GET] /api/employees called');
  try {
    const pool = await getPool();
    console.log('‚úÖ DB pool acquired');

    const result = await pool.request().query(`
      SELECT
        AP.ObjectID                   AS EmployeeObjID,
        AP.Name                       AS EmpName,
        CASE
          WHEN AP.Int1 = 0 OR AP.Int1 IS NULL THEN AP.Text12
          ELSE CAST(AP.Int1 AS NVARCHAR(100))
        END                           AS EmployeeID,
        PT.Name                       AS PersonnelType,
        AP.Text10                     AS Manager_Name,
        AP.Int4                       AS Manager_WU_ID,
        MAX(AI.Image)                 AS Image,  -- aggregate image safely
        AP.Disabled                   AS Profile_Disabled,
        COUNT(DISTINCT ACR.ObjectID)  AS Total_Cards,
        SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
                 AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
                 AND (ACR.Lost IS NULL OR ACR.Lost = 0)
                 AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        )                             AS Active_Cards,
        SUM(
          CASE
            WHEN ACR.ExpirationDateTime IS NOT NULL AND ACR.ExpirationDateTime < GETDATE()
            THEN 1 ELSE 0
          END
        )                             AS Expired_Cards,
        CASE
          WHEN AP.Disabled = 1 THEN 'Deactive'
          WHEN AP.Disabled = 0 AND SUM(
            CASE
              WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
                   AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
                   AND (ACR.Lost IS NULL OR ACR.Lost = 0)
                   AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
              THEN 1 ELSE 0
            END
          ) > 0 THEN 'Active'
          ELSE 'Deactive'
        END                           AS Employee_Status
      FROM ACVSCore.Access.Personnel AP
      LEFT JOIN ACVSCore.Access.Credential    ACR ON AP.Name = ACR.Name
      LEFT JOIN ACVSCore.Access.PersonnelType PT  ON PT.ObjectID = AP.PersonnelTypeID
      LEFT JOIN ACVSCore.Access.Images        AI  ON AI.ParentId = AP.ObjectID
      GROUP BY
        AP.ObjectID,
        AP.Name,
        AP.Int1,
        AP.Text12,
        PT.Name,
        AP.Text10,
        AP.Int4,
        AP.Disabled
      ORDER BY AP.Name
    `);

    console.log('‚úÖ Query executed, rows:', result.recordset.length);

    const employees = result.recordset.map(emp => ({
      id:               emp.EmployeeObjID,
      EmpName:          emp.EmpName,
      EmployeeID:       emp.EmployeeID,
      PersonnelType:    emp.PersonnelType,
      Manager_Name:     emp.Manager_Name,
      Manager_WU_ID:    emp.Manager_WU_ID,
      Profile_Disabled: emp.Profile_Disabled,
      Total_Cards:      emp.Total_Cards,
      Active_Cards:     emp.Active_Cards,
      Employee_Status:  emp.Employee_Status,
      imageUrl:         `/api/employees/${emp.EmployeeObjID}/image`
    }));

    return res.json(employees);
  } catch (err) {
    console.error('‚ùå Error in getEmployees:', err.stack || err);
    return res.status(500).json({
      error: 'Internal Server Error',
      message: err.message
    });
  }
};

module.exports = { getEmployees };








// controllers/employeeLocationController.js (inside getEmployeeLiveLocation)
const sql = require('mssql');
// ... other code above remains the same ...

async function getEmployeeLiveLocation(req, res) {
  const rawId = req.params.id;
  if (!rawId) return res.status(400).json({ error: 'Missing id' });

  // serve cache...
  const cached = cache[rawId];
  if (cached && Date.now() - cached.ts < CACHE_TTL_MS) {
    return res.json({ cached: true, ...cached.data });
  }

  try {
    const pool = await getPool();

    // Try several lookup strategies: objectid (bigint), Int1 (employee numeric ID), Text12 (string ID), Name
    let empResult = null;

    // If rawId looks like a number, try ObjectID and Int1
    if (/^\d+$/.test(String(rawId))) {
      // try ObjectID match
      empResult = await pool.request()
        .input('objid', sql.BigInt, rawId)
        .query(`
          SELECT AP.ObjectID, AP.Name AS EmpName, AP.Int1, AP.Text12
          FROM ACVSCore.Access.Personnel AP
          WHERE AP.ObjectID = @objid
        `);

      if (!empResult.recordset.length) {
        // try Int1 numeric match
        empResult = await pool.request()
          .input('int1', sql.BigInt, rawId)
          .query(`
            SELECT AP.ObjectID, AP.Name AS EmpName, AP.Int1, AP.Text12
            FROM ACVSCore.Access.Personnel AP
            WHERE AP.Int1 = @int1
          `);
      }
    }

    // If still not found, try text fields (Text12 or Name)
    if (!empResult || !empResult.recordset.length) {
      empResult = await pool.request()
        .input('maybe', sql.NVarChar(200), rawId)
        .query(`
          SELECT AP.ObjectID, AP.Name AS EmpName, AP.Int1, AP.Text12
          FROM ACVSCore.Access.Personnel AP
          WHERE AP.Text12 = @maybe OR AP.Name = @maybe
        `);
    }

    if (!empResult || !empResult.recordset.length) {
      console.warn(`Employee lookup: not found for id=${rawId}`);
      return res.status(404).json({ error: 'Employee not found' });
    }

    const empRow = empResult.recordset[0];
    // EmployeeID logic mirroring existing query:
    const EmployeeID = (empRow.Int1 === 0 || empRow.Int1 === '0' || empRow.Int1 === null)
      ? (empRow.Text12 ? String(empRow.Text12) : '')
      : String(empRow.Int1);

    const empName = empRow.EmpName || '';

    // ... rest of existing logic to call occupancy endpoints, match records, etc. ...






// server.js
const PORT = process.env.PORT || 5001;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});












I have deployee my Employee Verification filr on Windows 2019 but we got one issue need to fix
Read below error carefully and fix this think long and solve thsi issue carefully...
Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
App.js:204 ‚ùå Stats load failed AxiosError
(anonymous) @ App.js:204Understand this error
:5001/api/stats:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
App.js:204 ‚ùå Stats load failed AxiosError
(anonymous) @ App.js:204Understand this error
:5001/api/employees:1  Failed to load resource: the server responded with a status of 500 (Internal Server Error)Understand this error
:5001/api/employees/2097198226/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
:5001/api/employees/2097198226/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error
:5001/api/employees/2097207990/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error
:5001/api/employees/2097202945/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error
:5001/api/employees/2097198226/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error
:5001/api/employees/2097202945/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error
:5001/api/employees/2097207990/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error
:5001/api/employees/2097198226/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error
:5001/api/employees/2097202945/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error
:5001/api/employees/2097198226/location:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
CurrentLocation.jsx:30 Location load error Request failed with status code 404
(anonymous) @ CurrentLocation.jsx:30Understand this error





D:\DASHBOARD\employee-verification\controllers\employeeController.js


// controllers/employeeController.js
const { getPool } = require('../config/db');

const getEmployees = async (req, res) => {
  console.log('üéØ [GET] /api/employees called');
  try {
    const pool = await getPool();
    console.log('‚úÖ DB pool acquired');
    const result = await pool.request().query(`
      SELECT DISTINCT
        AP.ObjectID           AS EmployeeObjID,     
        AP.Name               AS "Emp Name",
        CASE AP.Int1
          WHEN 0 THEN AP.Text12
          ELSE CAST(AP.Int1 AS NVARCHAR)
        END                    AS "EmployeeID",
        PT.Name               AS "PersonnelType",
        AP.Text10             AS "Manager Name",
        AP.Int4               AS Manager_WU_ID,
        AI.Image              AS Image,
        AP.Disabled           AS Profile_Disabled,
        COUNT(ACR.Name)       AS Total_Cards,
        SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        )                      AS Active_Cards,
        SUM(
          CASE
            WHEN ACR.ExpirationDateTime IS NOT NULL AND ACR.ExpirationDateTime < GETDATE()
            THEN 1 ELSE 0
          END
        )                      AS Expired_Cards,
        CASE
          WHEN AP.Disabled = 1 THEN 'Deactive'
          WHEN AP.Disabled = 0 THEN
            CASE
              WHEN SUM(
                CASE
                  WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
                    AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
                    AND (ACR.Lost IS NULL OR ACR.Lost = 0)
                    AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
                  THEN 1 ELSE 0
                END
              ) > 0 THEN 'Active'
              ELSE 'Deactive'
            END
          ELSE 'Deactive'
        END                    AS "Employee_Status"
      FROM ACVSCore.Access.Personnel AP
      INNER JOIN ACVSCore.Access.Credential    ACR ON AP.Name = ACR.Name
      INNER JOIN ACVSCore.Access.PersonnelType PT  ON PT.ObjectID = AP.PersonnelTypeID
      INNER JOIN ACVSCore.Access.Images        AI  ON AI.ParentId = AP.ObjectID
      GROUP BY
        AP.ObjectID,
        AP.Name,
        AP.Int1,
        AP.Text12,
        PT.Name,
        AP.Text10,
        AP.Int4,
        AI.Image,
        AP.Disabled
      ORDER BY AP.Name
    `);
    console.log('‚úÖ Query executed, rows:', result.recordset.length);

    const employees = result.recordset.map(emp => ({
      id:               emp.EmployeeObjID,
      EmpName:          emp["Emp Name"],
      EmployeeID:       emp.EmployeeID,
      PersonnelType:    emp.PersonnelType,
      Manager_Name:     emp["Manager Name"],
      Manager_WU_ID:    emp.Manager_WU_ID,
      Profile_Disabled: emp.Profile_Disabled,
      Total_Cards:      emp.Total_Cards,
      Active_Cards:     emp.Active_Cards,
      Employee_Status:  emp.Employee_Status,
      imageUrl:         `/api/employees/${emp.EmployeeObjID}/image`
    }));

    return res.json(employees);
  } catch (err) {
    console.error('‚ùå Error in getEmployees:', err.stack || err);
    return res.status(500).json({
      error: 'Internal Server Error',
      message: err.message
    });
  }
};

module.exports = { getEmployees };
// ............................................

// At the end of controllers/employeeController.js
const getEmployeeStats = async (req, res) => {
  try {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT
        COUNT(*) AS TotalProfiles,
        SUM(CASE WHEN AP.Disabled = 0 THEN 1 ELSE 0 END) AS ActiveProfiles,
        SUM(CASE WHEN AP.Disabled = 0 AND PT.Name = 'Employee' THEN 1 ELSE 0 END) AS ActiveEmployees,
        SUM(CASE WHEN AP.Disabled = 0 AND PT.Name = 'Contractor' THEN 1 ELSE 0 END) AS ActiveContractors,
        SUM(CASE WHEN AP.Disabled = 1 THEN 1 ELSE 0 END) AS TerminatedProfiles,
        SUM(CASE WHEN AP.Disabled = 1 AND PT.Name = 'Employee' THEN 1 ELSE 0 END) AS TerminatedEmployees,
        SUM(CASE WHEN AP.Disabled = 1 AND PT.Name = 'Contractor' THEN 1 ELSE 0 END) AS TerminatedContractors
      FROM ACVSCore.Access.Personnel AP
      INNER JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = AP.PersonnelTypeID
    `);
    res.json(result.recordset[0]);
  } catch (err) {
    console.error('‚ùå getEmployeeStats error', err.stack || err);
    res.status(500).json({ error: 'Failed to get stats' });
  }
};

module.exports.getEmployeeStats = getEmployeeStats;






// controllers/employeeLocationController.js


const axios = require('axios');
const sql = require('mssql');
const { getPool } = require('../config/db');

const OCCUPANCY_URLS = [
  'http://10.199.22.57:3006/api/occupancy/live-summary',

  'http://10.199.22.57:3007/api/occupancy/live-summary',  // EMEA


  'http://10.199.22.57:3008/api/occupancy/live-summary',  //Pune


  'http://10.199.22.57:4000/api/occupancy/live-summary'   //laca

];

// Simple in-memory cache: { [employeeObjId]: { ts: Number, data: Object } }
const cache = {};
const CACHE_TTL_MS = 50000; // 5 seconds ‚Äî tune as needed

function normalizeString(s) {
  if (!s && s !== 0) return '';
  return String(s).trim().toLowerCase();
}

function parseRecordTime(rec) {
  // Priority: LocaleMessageTime -> snapshotTime -> Dateonly + Swipe_Time
  if (rec.LocaleMessageTime) return new Date(rec.LocaleMessageTime);
  if (rec.snapshotTime) return new Date(rec.snapshotTime);
  if (rec.Dateonly && rec.Swipe_Time) {
    // e.g. "2025-08-11" + "00:02:41"
    return new Date(`${rec.Dateonly}T${rec.Swipe_Time}Z`);
  }
  return null;
}

async function getEmployeeLiveLocation(req, res) {
  const employeeObjId = req.params.id;
  if (!employeeObjId) return res.status(400).json({ error: 'Missing id' });

  // Serve cache if fresh
  const cached = cache[employeeObjId];
  if (cached && Date.now() - cached.ts < CACHE_TTL_MS) {
    return res.json({ cached: true, ...cached.data });
  }

  try {
    // 1) Fetch EmployeeID and Name from DB (same logic as getEmployees)
    const pool = await getPool();
    const empResult = await pool.request()
      .input('objid', sql.BigInt, employeeObjId)
      .query(`
        SELECT AP.ObjectID,
               AP.Name AS EmpName,
               AP.Int1,
               AP.Text12
        FROM ACVSCore.Access.Personnel AP
        WHERE AP.ObjectID = @objid
      `);

    if (!empResult.recordset.length) {
      return res.status(404).json({ error: 'Employee not found' });
    }

    const empRow = empResult.recordset[0];
    // EmployeeID logic mirroring existing query:
    const EmployeeID = (empRow.Int1 === 0 || empRow.Int1 === '0' || empRow.Int1 === null)
      ? (empRow.Text12 ? String(empRow.Text12) : '')
      : String(empRow.Int1);

    const empName = empRow.EmpName || '';

    // 2) Query occupancy endpoints concurrently
    const requests = OCCUPANCY_URLS.map(u => axios.get(u, { timeout: 5000 }).catch(e => ({ error: e, url: u })));
    const responses = await Promise.all(requests);

    // 3) Collect and flatten details
    let allDetails = [];
    for (const r of responses) {
      if (!r || r.error) {
        // Log but continue
        console.warn('Occupancy fetch failed for', r && r.url, r && r.error && r.error.message);
        continue;
      }
      if (r.data && Array.isArray(r.data.details)) {
        // Keep source url for debugging
        const src = r.config && r.config.url ? r.config.url : null;
        const annotated = r.data.details.map(d => ({ ...d, __source: src }));
        allDetails.push(...annotated);
      }
    }

    // 4) Find matches by EmployeeID (preferred), fallback to name (ObjectName1), then PersonGUID
    const normEmployeeID = normalizeString(EmployeeID);
    const normEmpName = normalizeString(empName);

    const matches = allDetails.filter(rec => {
      const recEmpId = normalizeString(rec.EmployeeID);
      if (recEmpId && normEmployeeID && recEmpId === normEmployeeID) return true;

      const recName = normalizeString(rec.ObjectName1);
      if (recName && normEmpName && recName === normEmpName) return true;

      if (rec.PersonGUID) {
        // optionally, you can compare GUIDs if you have them
      }
      return false;
    });

    if (!matches.length) {
      const result = { found: false, message: 'No recent swipe found' };
      cache[employeeObjId] = { ts: Date.now(), data: result };
      return res.json(result);
    }

    // 5) Select most recent
    let best = null;
    for (const m of matches) {
      const t = parseRecordTime(m);
      if (!t) continue;
      if (!best) best = { rec: m, time: t };
      else if (t > best.time) best = { rec: m, time: t };
    }

    if (!best) {
      const result = { found: false, message: 'No timestamped swipe found' };
      cache[employeeObjId] = { ts: Date.now(), data: result };
      return res.json(result);
    }

    const r = best.rec;


    const payload = {
      found: true,
      source: r.__source || null,
      partition: r.PartitionName2 || r.Partition || null,
      floor: r.Floor || r.Zone || r.floor || null,
      Zone: r.Zone,
      door: r.Door || null,
      direction: r.Direction || null,
      timestampUTC: r.LocaleMessageTime || r.snapshotTime || `${r.Dateonly}T${r.Swipe_Time}Z` || null,
      personnelType: r.PersonnelType || null,
      cardNumber: r.CardNumber || null,
      raw: r
    };
    cache[employeeObjId] = { ts: Date.now(), data: payload };

    return res.json(payload);

  } catch (err) {
    console.error('getEmployeeLiveLocation error', err && err.stack || err);
    return res.status(500).json({ error: 'Failed to fetch live location', message: err.message });
  }
}

module.exports = { getEmployeeLiveLocation };







//D:\DASHBOARD\employee-verification\routes\employeeRoutes.js
const express = require('express');
const router  = express.Router();

const { getEmployees }     = require('../controllers/employeeController');
const { getEmployeeImage } = require('../controllers/employeeImageController');

const { getEmployeeStats } = require('../controllers/employeeController');


const { getEmployeeLiveLocation } = require('../controllers/employeeLocationController');
router.get('/employees/:id/location', getEmployeeLiveLocation);

// Metadata endpoint
router.get('/employees', getEmployees);

// Image stream endpoint
router.get('/employees/:id/image', getEmployeeImage);

// ... other routes
router.get('/stats', getEmployeeStats);

module.exports = router;









// server.js

const express = require('express');
const cors = require('cors');
require('dotenv').config();

const employeeRoutes = require('./routes/employeeRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// ‚úÖ Correct route
app.use('/api', employeeRoutes);

const PORT = process.env.PORT || 5001;

app.listen(PORT, () => {
    console.log(`üöÄ Server running on http://10.199.22.57:${PORT}`);
});





D:\DASHBOARD\employee-verification\frontend\src\components\CurrentLocation.jsx


import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { FaMapMarkerAlt, FaPalette, FaCalendarAlt, FaClock, FaDoorClosed, FaExchangeAlt } from 'react-icons/fa';
import './EmployeeCard.css';
export default function CurrentLocation({ empId, showMore }) {
  const [loading, setLoading] = useState(false);
  const [loc, setLoc] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!empId) {
      setLoc(null);
      setError('');
      return;
    }

    let cancelled = false;
    setLoading(true);
    setError('');
    setLoc(null);

    axios
      .get(`http://10.199.22.57:5001/api/employees/${empId}/location`)
      .then((res) => {
        if (cancelled) return;
        setLoc(res.data);
      })
      .catch((err) => {
        if (cancelled) return;
        console.error('Location load error', err?.message || err);
        setError('Failed to load location');
      })
      .finally(() => {
        if (!cancelled) setLoading(false);
      });

    return () => {
      cancelled = true;
    };
  }, [empId]);

  if (!empId) return null;

  return (
    <div className="current-location-card" style={{ marginTop: 1 }}>
      <h4 style={{ margin: '0 0 6px 0', fontSize: 14, color: '#f5a742' }}>Swipe Details</h4>

      {loading && <div style={{ color: '#fff' }}>Loading location‚Ä¶</div>}
      {error && <div style={{ color: '#fff' }}>{error}</div>}

      {!loading && loc && !loc.found && (
        <div style={{ color: '#2ced0e' }}>No recent swipe</div>
      )}

      {!loading && loc && loc.found && (


        <table className="swipe-details-table">
          <tbody>
            <tr>
              <td className="label"><FaMapMarkerAlt className="icon location" /> Location</td>
              <td className="value">
                {loc.partition || '‚Äî'}
                {loc.floor ? ` ¬∑ ${loc.floor}` : ''}
              </td>
            </tr>


            <tr>
              <td className="label">
                <FaPalette className="icon zone" /> {loc.Zone ? 'Zone' : 'Floor'}
              </td>
              <td className="value">
                {loc.Zone || loc.floor || '‚Äî'}
              </td>
            </tr>

            {showMore && (
              <>


                <tr>
                  <td className="label"><FaCalendarAlt className="icon date" /> Date</td>
                  <td className="value">
                    {loc.timestampUTC
                      ? loc.timestampUTC.split('T')[0] // "2025-08-14"
                      : '‚Äî'}
                  </td>
                </tr>



                <tr>
                  <td className="label"><FaClock className="icon time" /> Time</td>
                  <td className="value">
                    {loc.timestampUTC
                      ? new Date(
                        `1970-01-01T${loc.timestampUTC.split('T')[1].replace('Z', '')}Z`
                      ).toLocaleTimeString([], {
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true,
                        timeZone: 'UTC'   // <- keep it in UTC so it shows "4:21 PM"
                      })
                      : '‚Äî'}
                  </td>
                </tr>


                <tr>
                  <td className="label"><FaDoorClosed className="icon door" /> Door</td>
                  <td className="value">{loc.door || '‚Äî'}</td>
                </tr>
                <tr>
                  <td className="label"><FaExchangeAlt className="icon direction" /> Direction</td>
                  <td className="value">{loc.direction || '‚Äî'}</td>
                </tr>
              </>
            )}
          </tbody>
        </table>

      )}
    </div>
  );
}






D:\DASHBOARD\employee-verification\frontend\src\components\EmployeeCard.jsx



// C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\EmployeeCard.jsx
import React, { useState } from 'react';
import { FaUser, FaIdBadge, FaUserTie, FaIdCard, FaCheckCircle, FaClone } from 'react-icons/fa';
import CurrentLocation from './CurrentLocation';
import './EmployeeCard.css';

export default function EmployeeCard({ emp }) {
  const [showMore, setShowMore] = useState(false);

  if (!emp) return null;

  const rawStatus = emp.Employee_Status || 'Deactive';
  const normalizedStatus = rawStatus.trim().toLowerCase();
  const isRedStatus =
    normalizedStatus === 'deactive' || normalizedStatus === 'terminated';

  return (
    <div
      className="employee-card-container"
      data-status={normalizedStatus}
      style={{
        background: isRedStatus
          ? '#e7776b'
          : 'linear-gradient(180deg, #131318 0%, #1d1d26 100%)',
      }}
    >
      {/* Left column */}
      <div className="left-col">
        <div className="photo-ring">
          <img
            className="photo"
            src={emp.imageUrl ? `http://10.199.22.57:5001${emp.imageUrl}` : '/images/no-photo.jpg'}
            alt={emp.EmpName || 'Employee photo'}
            onError={(e) => {
              e.target.onerror = null;
              e.target.src = '/images/no-photo.jpg';
            }}
          />
        </div>

        <div className="photo-meta">
          <div className="emp-name">{emp.EmpName || '‚Äî'}</div>
          <div className="emp-role">{emp.PersonnelType || 'Employee'}</div>
          <div className={`status-pill ${normalizedStatus}`}>{rawStatus}</div>
        </div>
      </div>

      {/* Separator */}
      <div className="separator" aria-hidden />

      {/* Right column */}
      <div className="right-col">
        <h3 className="profile-title">Profile Details</h3>

        <table className="details-table" aria-label="employee details">
          <tbody>
            {/* Always visible */}
            <tr>
              <td className="label "><FaUser color='#FFDD00' /> Name</td>
              <td className="value v-color">{emp.EmpName || '‚Äî'}</td>
            </tr>
            <tr>
              <td className="label"><FaIdBadge color='#FFDD00' /> Employee ID</td>
              <td className="value v-color">{emp.EmployeeID || '‚Äî'}</td>
            </tr>
            <tr>
              <td className="label"><FaUserTie color='#FFDD00'/> Manager</td>
              <td className="value v-color">{emp.Manager_Name || '‚Äî'}</td>
            </tr>
            <tr>
              <td className="label"><FaIdCard /> Active Cards</td>
              <td className="value v-color">{emp.Active_Cards ?? 0}</td>
            </tr>
            <tr>
              <td colSpan="2" style={{ paddingTop: 1 }}>
                <CurrentLocation empId={emp.id ?? emp.EmployeeID} showMore={showMore} />
              </td>
            </tr>

            {/* Hidden until showMore is true */}
            {showMore && (
              <>
                <tr>
                  <td className="label"><FaClone /> Total Cards</td>
                  <td className="value">{emp.Total_Cards ?? 0}</td>
                </tr>
              </>
            )}
          </tbody>
        </table>

        {/* Toggle Button */}
        <button
          className="show-more-btn"
          onClick={() => setShowMore((prev) => !prev)}
        >
          {showMore ? 'Show Less' : 'Show More'}
        </button>
      </div>
    </div>
  );
}





// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';
import wulogo from './assets/img/WU-logo.png';

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [history, setHistory] = useState([]);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    setLoading(true);
    axios.get('http://10.199.22.57:5001/api/employees') //http://10.199.22.57:5001/api/employees
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    axios.get('http://10.199.22.57:5001/api/stats')
      .then(res => setStats(res.data))
      .catch(err => console.error('‚ùå Stats load failed', err));
  }, []);

  // Update Related Results based on searchTerm
  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();

    if (!term) {
      setSuggestions([]);
      return;
    }

    const filtered = allEmployees.filter(emp => {
      if (!emp.EmpName) return false;

      // Check EmployeeID first
      const id = emp.EmployeeID ? emp.EmployeeID.toLowerCase() : '';
      if (id.includes(term)) return true;

      // Split name into components
      const nameParts = emp.EmpName.toLowerCase().split(' ');

      // Check each name component
      return nameParts.some(part => part.includes(term));
    });

    setSuggestions(filtered);
  }, [searchTerm, allEmployees]);



  const handleSearch = () => {
    const term = searchTerm.trim().toLowerCase();
    setError('');

    if (!term) {
      setSuggestions([]);
      setSelected(null);
      return setError('Please enter name or ID');
    }

    // Find matches - now checking name components
    const matches = allEmployees.filter(emp => {
      if (!emp.EmpName) return false;

      // Check ID first
      const id = emp.EmployeeID ? emp.EmployeeID.toLowerCase() : '';
      if (id === term) return true;

      // Check name components
      const nameParts = emp.EmpName.toLowerCase().split(' ');
      return nameParts.some(part => part === term);
    });

    if (matches.length === 1) {
      selectEmployee(matches[0]);
    } else if (matches.length > 1) {
      setSuggestions(matches);
      setError('Multiple matches found - please select one');
    } else {
      setSelected(null);
      setError('No exact matching employee found');
    }
  };

  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName || '');
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  const pickSuggestion = emp => {
    if (!emp) return;
    selectEmployee(emp);
  };

  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <div className="header-content">
          <div className="header-logo-text">
            <img src={wulogo} alt="WU Logo" className="logo" />
            <div className="header-text">
              <h1>Associate Verification Tool</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="main-container">
        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
            />
          </div>
          {loading && <p>Loading‚Ä¶</p>}
          {error && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>

        <div className="right-panel">
          <div className="lists-container">

            {/* <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.length === 0 && <li>No results</li>}
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div> */}


            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.length === 0 && searchTerm && <li>No matching employees found</li>}
                {!searchTerm && <li>Start typing to see suggestions</li>}
                {suggestions.map((emp, idx) => (
                  <li key={`${emp.EmployeeID ?? emp.EmpName}-${idx}`} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}


              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map((emp, idx) => (
                  <li key={`${emp.EmployeeID ?? emp.EmpName}-${idx}`} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool ‚Äî Western Union
        </div>
        <div>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </div>
  );
}

export default App;






D:\DASHBOARD\employee-verification\frontend\src\index.js


import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import './App.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();




