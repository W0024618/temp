// src/pages/PartitionDetail.jsx

import React, { useEffect, useState } from "react";
import {
  Container,
  Box,
  Typography,
  Button,
  CircularProgress,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import SummaryCard from "../components/SummaryCard";
import ChartCard from "../components/ChartCard";
import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";

import { fetchLiveSummary, fetchHistory } from "../api/occupancy.service";


import buildingCapacities from "../data/buildingCapacities";

export default function PartitionDetail() {
  const { partition } = useParams(); // e.g. 'IN.Pune'
  const navigate = useNavigate();

  const [liveSummary, setLiveSummary] = useState(null);
  const [history, setHistory] = useState(null);
  const [historyLoading, setHistoryLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState("");

  // 1) Auto‐refresh live summary every second
  useEffect(() => {
    let timer;
    async function loadLive() {
      const json = await fetchLiveSummary();
      setLiveSummary(json);
      setLastUpdate(new Date().toLocaleTimeString());
    }
    loadLive();
    timer = setInterval(loadLive, 1000);
    return () => clearInterval(timer);
  }, [partition]);

  // 2) Fetch per‐partition history once on mount / partition change
  useEffect(() => {
    setHistoryLoading(true);
    fetchHistory(partition).then((json) => {
      setHistory(json);
      setHistoryLoading(false);
    });
  }, [partition]);

  if (!liveSummary || !history) {
    return <LoadingSpinner />;
  }

  // 3) Grab the last day’s summary record
  const lastDay = history.summaryByDate?.at(-1);

  // 4) For the partition detail endpoint, history.lastDay.region holds
  //    exactly { total, Employee, Contractor } for that partition.
  const todayHist = lastDay?.region || {
    total: 0,
    Employee: 0,
    Contractor: 0,
  };

  // 5) Realtime data is keyed by the display name, which now matches
  //    the partition code's suffix (after stripping dot-prefix in service).
  //    E.g. 'IN.Pune' → liveSummary.realtime['Pune']
  const codeMap = {
    'IN.Pune': 'Pune',
    'MY.Kuala Lumpur': 'MY.Kuala Lumpur',
    'PH.Quezon': 'Quezon City',
    'PH.Taguig': 'Taguig City',
    'JP.Tokyo': 'JP.Tokyo',
    'IN.HYD': 'IN.HYD'
  };
  const realKey = codeMap[partition] || partition;






  const live = liveSummary.realtime[realKey] || {
    total: 0,
    Employee: 0,
    Contractor: 0,
    floors: {},
  };

  // 6) Build floor entries for the ChartCard from live.floors
  const floorEntries = live.floors
    ? Object.entries(live.floors).map(([floor, cnt]) => {
      const name = floor.trim();
      const capacity = buildingCapacities[name] ?? 0;
      const pct = capacity ? Math.round((cnt / capacity) * 100) : 0;
      return {
        name,
        Headcount: cnt,
        Capacity: capacity,
        breakdown: {
          Headcount: cnt,
          "Total Seat": capacity,
          Usage: pct + "%",
        },
      };
    })
    : [];

  return (
    <>
      <Header />

      <Box component="main" sx={{ pt: 1, pb: 1 }}>

        <Container maxWidth={false} disableGutters>

          {/* Back button */}
          <Box display="flex" alignItems="center" mb={1} sx={{ px: "20px" }}>
            <Button size="small" onClick={() => navigate(-1)}>
              ← Back
            </Button>
          </Box>





          {/* Six-card partition summary */}
          <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
            {[
              {
                title: "Today's Total Headcount",
                value: historyLoading ? <CircularProgress size={20} /> : todayHist.total,
                icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: "#FFB300" }} />,
                border: "#FFB300",
              },
              {
                title: "Today's Employees Count",
                value: historyLoading ? <CircularProgress size={20} /> : todayHist.Employee,
                icon: <i className="bi bi-people" style={{ fontSize: 25, color: "#EF5350" }} />,
                border: "#8BC34A",
              },
              {
                title: "Today's Contractors Count",
                value: historyLoading ? <CircularProgress size={20} /> : todayHist.Contractor,
                icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: "#8BC34A" }} />,
                border: "#E57373",
              },
              {
                title: "Realtime Headcount",
                value: live.total,
                icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: "#FFB300" }} />,
                border: "#FFD180",
              },
              {
                title: "Realtime Employees Count",
                value: live.Employee,
                icon: <i className="bi bi-people" style={{ fontSize: 25, color: "#EF5350" }} />,
                border: "#AED581",
              },
              {
                title: "Realtime Contractors Count",
                value: live.Contractor,
                icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: "#8BC34A" }} />,
                border: "#EF5350",
              },
            ].map((card) => (
              <Box
                key={card.title}
                sx={{
                  flex: {
                    xs: "1 1 100%",     // mobile: full width
                    sm: "1 1 calc(50% - 8px)", // tablets: 2 per row
                    md: "1 1 calc(33.33% - 8px)", // small desktops: 3 per row
                    lg: "1 1 calc(33.33% - 8px)", // large desktops: 3 per row
                    xl: "1 1 calc(16.66% - 8px)", // extra large: 6 per row
                  },
                  minWidth: 0, // fixes overflow issues
                }}
              >
                <SummaryCard
                  title={card.title}
                  total={card.value}
                  stats={[]}
                  icon={card.icon}
                  sx={{
                    height: 140,
                    border: `2px solid ${card.border}`,
                  }}
                />
              </Box>
            ))}
          </Box>



          {/* Floor‐capacity chart */}
          <Box mb={4} sx={{ px: "20px", p: 2, border: "2px solid #FFC107" }}>
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              mb={1}
            >
              <Typography variant="h6">
                Live Floor Headcount against Occupancy
              </Typography>
              <Typography variant="body2" color="textSecondary">
                Last updated: {lastUpdate}
              </Typography>
            </Box>

            <ChartCard
              data={floorEntries}
              dataKey="Headcount"
              chartHeight={320}
              colors={{ head: "#28B463", cap: "#FDDA0D" }}
              axisProps={{
                xAxis: { angle: -0, textAnchor: "end", tick: { fill: "#fff" } },
                yAxis: { tick: { fill: "#fff" } },
              }}
            />
          </Box>
        </Container>
      </Box>

      <Footer />
    </>
  );
}
