
import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav, Form, Button, InputGroup } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';

import DashboardHome from './pages/DashboardHome';
import FloorDetailsPage from './pages/FloorDetailsPage';
import DenverInOutInconsistencyPage from './pages/DenverInOutInconsistency'; // ← NEW
import OverlayTrigger from "react-bootstrap/OverlayTrigger";
import Tooltip from "react-bootstrap/Tooltip";


import './App.css';

export default function App() {
  // live data states
  const [floorData, setFloorData] = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown] = useState([]);
  const [totalVisitedToday, setTotalVisitedToday] = useState(0);
  const [personnelSummary, setPersonnelSummary] = useState({ employees: 0, contractors: 0 });
  const [visitedToday, setVisitedToday] = useState({ employees: 0, contractors: 0, total: 0 });
  const [floorInOutSummary, setFloorInOutSummary] = useState([]); // ← NEW

  // --- NEW: visited occupants handling ---
  // Holds the live list updated by SSE
  const [liveVisitedOccupants, setLiveVisitedOccupants] = useState([]);
  // Holds the currently displayed occupants (either live or snapshot)
  const [visitedOccupants, setVisitedOccupants] = useState([]);

  // new: in/out inconsistency data
  const [inOutData, setInOutData] = useState(null);
  const [loadingInOut, setLoadingInOut] = useState(true);
  const [inOutError, setInOutError] = useState(null);

  // --- Snapshot/time selection states ---
  const [snapshotMode, setSnapshotMode] = useState(false);
  const [snapshotTime, setSnapshotTime] = useState(''); // "HH:MM" or "HH:MM:SS"
  const [snapshotDate, setSnapshotDate] = useState(() => {
    // default to today's date in America/Denver in YYYY-MM-DD (en-CA format)
    try {
      return new Date().toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
    } catch (e) {
      // fallback to local date if running in environment without timeZone support
      const d = new Date();
      const yyyy = d.getFullYear();
      const mm = String(d.getMonth() + 1).padStart(2, '0');
      const dd = String(d.getDate()).padStart(2, '0');
      return `${yyyy}-${mm}-${dd}`;
    }
  });
  const [snapshotLoading, setSnapshotLoading] = useState(false);
  const [snapshotError, setSnapshotError] = useState(null);
  const [snapshotData, setSnapshotData] = useState(null); // will hold the payload returned by the new API

  // live SSE (unchanged except we now manage visitedOccupants/liveVisitedOccupants)
  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy-denver');
    es.onmessage = e => {
      try {
        const p = JSON.parse(e.data);
        setFloorData(p.floorBreakdown || []);
        setPersonnelBreakdown(p.personnelBreakdown || []);
        setTotalVisitedToday(p.totalVisitedToday || 0);
        setPersonnelSummary(p.personnelSummary || { employees: 0, contractors: 0 });
        setVisitedToday(p.visitedToday || { employees: 0, contractors: 0, total: 0 });
        setFloorInOutSummary(p.floorInOutSummary || []);

        // ---- NEW: keep liveVisitedOccupants up-to-date ----
        const liveList = p.visitedOccupants || [];
        setLiveVisitedOccupants(liveList);

        // only overwrite displayed visitedOccupants if NOT in snapshotMode
        setVisitedOccupants(prev => (snapshotMode ? prev : liveList));
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };
    es.onerror = err => {
      console.error('SSE error:', err);
      es.close();
    };
    return () => es.close();
  }, [snapshotMode]); // depend on snapshotMode so SSE handler knows current mode

  // Fetch once: in/out inconsistency JSON (unchanged)
  useEffect(() => {
    fetch('http://localhost:5000/api/inout-inconsistency-denver')
      .then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status} - ${res.statusText}`);
        return res.json();
      })
      .then(data => {
        setInOutData(data.floorInconsistency || []); // ✅ Store only the array we want
        setLoadingInOut(false);
      })
      .catch(err => {
        console.error('Failed to load in/out inconsistency:', err);
        setInOutError(err.message);
        setLoadingInOut(false);
      });
  }, []);

  // --- Snapshot handlers ---
  const handleSnapshotTimeChange = (e) => {
    setSnapshotTime(e.target.value);
    setSnapshotError(null);
  };

  const handleSnapshotDateChange = (e) => {
    setSnapshotDate(e.target.value);
    setSnapshotError(null);
  };

  // helper: return current Denver datetime as an ISO-like string "YYYY-MM-DDTHH:MM:SS"
  function getDenverNowIsoString() {
    const fmt = new Intl.DateTimeFormat('en-CA', {
      timeZone: 'America/Denver',
      year: 'numeric', month: '2-digit', day: '2-digit',
      hour: '2-digit', minute: '2-digit', second: '2-digit',
      hour12: false
    });
    const parts = fmt.formatToParts(new Date());
    const m = {};
    parts.forEach(p => { if (p.type !== 'literal') m[p.type] = p.value; });
    // format parts into ISO-like string (always zero-padded by Intl)
    return `${m.year}-${m.month}-${m.day}T${m.hour}:${m.minute}:${m.second}`;
  }



  const applySnapshot = async () => {
    if (!snapshotTime) {
      setSnapshotError('Select a time first.');
      return;
    }
    if (!snapshotDate) {
      setSnapshotError('Select a date first.');
      return;
    }

    // Ensure time has seconds (append :00 if only HH:MM)
    const timeForApi = snapshotTime.length === 5 ? `${snapshotTime}:00` : snapshotTime;

    // Build Denver-local ISO-like strings (no timezone suffix) and compare lexicographically
    const snapshotIso = `${snapshotDate}T${timeForApi}`;             // e.g. "2025-09-17T07:00:00"
    const nowDenverIso = getDenverNowIsoString();                    // current Denver like "2025-09-17T04:30:12"

    // If snapshot time is strictly in the future relative to Denver now -> block
    if (snapshotIso > nowDenverIso) {
      const msg = 'Please select a relevant time — snapshot cannot be in the future (Denver local time).';
      setSnapshotError(msg);
      // small popup to alert user immediately
      window.alert(msg);
      return;
    }

    setSnapshotLoading(true);
    setSnapshotError(null);

    try {
      const url = `http://localhost:5000/api/occupancy-at-time-denver?date=${encodeURIComponent(snapshotDate)}&time=${encodeURIComponent(timeForApi)}`;
      const resp = await fetch(url);
      if (!resp.ok) {
        const txt = await resp.text();
        throw new Error(`${resp.status} ${resp.statusText} - ${txt}`);
      }
      const json = await resp.json();

      // Store snapshot payload
      setSnapshotData(json);

      // set visitedOccupants from snapshot (if present)
      setVisitedOccupants(json.visitedOccupants || []);

      // activate snapshot mode
      setSnapshotMode(true);
    } catch (err) {
      console.error('Failed to fetch snapshot:', err);
      setSnapshotError(err.message || 'Failed to fetch snapshot');
      setSnapshotData(null);
      setSnapshotMode(false);
    } finally {
      setSnapshotLoading(false);
    }
  };


  const clearSnapshot = () => {
    setSnapshotMode(false);
    setSnapshotData(null);
    setSnapshotTime('');
    setSnapshotError(null);
    setSnapshotLoading(false);

    // ---- NEW: restore visitedOccupants to live list ----
    setVisitedOccupants(liveVisitedOccupants);
  };

  // --- Decide which data to pass into child components: snapshotData (if active) or live data ---
  const activeFloorData = snapshotMode && snapshotData ? (snapshotData.floorBreakdown || []) : floorData;
  const activePersonnelBreakdown = snapshotMode && snapshotData ? (snapshotData.personnelBreakdown || []) : personnelBreakdown;
  const activeTotalVisitedToday = snapshotMode && snapshotData ? (snapshotData.totalVisitedToday || 0) : totalVisitedToday;
  const activePersonnelSummary = snapshotMode && snapshotData ? (snapshotData.personnelSummary || { employees: 0, contractors: 0 }) : personnelSummary;
  const activeVisitedToday = snapshotMode && snapshotData ? (snapshotData.visitedToday || { employees: 0, contractors: 0, total: 0 }) : visitedToday;
  const activeFloorInOutSummary = snapshotMode && snapshotData ? (snapshotData.floorInOutSummary || []) : floorInOutSummary;

  // ---- NEW: decide active visited occupants to pass down ----
  const activeVisitedOccupants = snapshotMode && snapshotData ? (snapshotData.visitedOccupants || []) : visitedOccupants;

  // Helper text to be shown in navbar / header when snapshot is active
  let snapshotLabel = null;
  if (snapshotMode && snapshotData) {
    const asOfLocal = snapshotData.asOfLocal || snapshotData.asOf || snapshotData.asOfUTC;
    try {
      // If asOfLocal exists, show it formatted for Denver
      const d = asOfLocal ? new Date(asOfLocal) : null;
      const formatted = d ? d.toLocaleString('en-US', { timeZone: 'America/Denver' }) : `${snapshotDate} ${snapshotTime}`;
      snapshotLabel = <div style={{
        background: '#363d37',
        color: '#FFF',
        padding: '8px 16px',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        borderLeft: '4px solid rgb(11, 248, 3)',
        marginBottom: 8
      }}> Snapshot: {formatted} (Denver) </div>;
    } catch (e) {
      snapshotLabel = `Snapshot: ${snapshotDate} ${snapshotTime}`;
    }
  }

  return (
    <BrowserRouter>
      <div className="dark-theme">
        <Navbar bg="dark" variant="dark" expand="lg" className="px-4 navbar-infographic">

          <Navbar.Brand as={Link} to="/" className="wu-brand">
            Live Occupancy — Western Union Denver
          </Navbar.Brand>

          <Nav className="ms-auto align-items-center">

           

            <OverlayTrigger
              placement="bottom"
              overlay={<Tooltip id="tooltip-dashboard" className='h-tooltip' >Dashboard</Tooltip>}>
              <Nav.Link as={Link} to="/" className="nav-item-infographic">
                <i className="bi bi-house"></i>
              </Nav.Link>
            </OverlayTrigger>

      
            <OverlayTrigger
              placement="bottom"
              overlay={<Tooltip id="tooltip-history">Navigate To History Page</Tooltip>}>
              <Nav.Link
                href="http://10.199.22.57:3002/partition/US.CO.OBS/history"
                className="nav-item-infographic">
                <i className="bi bi-clock-history"></i>
              </Nav.Link>
            </OverlayTrigger>

            <OverlayTrigger
              placement="bottom"
              overlay={<Tooltip id="tooltip-details">Details</Tooltip>}>
              <Nav.Link as={Link} to="/floor-details" className="nav-item-infographic">
                <i className="fa-solid fa-calendar-day"></i>
              </Nav.Link>
            </OverlayTrigger>

            {/* Snapshot time + date picker UI */}
            <Form className="d-flex align-items-center ms-3" onSubmit={e => e.preventDefault()}>
              <InputGroup>
                <Form.Control
                  type="date"
                  value={snapshotDate}
                  onChange={handleSnapshotDateChange}
                  title="Select date (Denver)"
                  style={{ maxWidth: 150 }}
                />
                <Form.Control
                  type="time"
                  step="1"              // allow seconds in browsers that support it
                  value={snapshotTime}
                  onChange={handleSnapshotTimeChange}
                  title="Select time (Denver)"
                  style={{ maxWidth: 120 }}
                />
                <Button variant="outline-light" onClick={applySnapshot} disabled={snapshotLoading}>
                  {snapshotLoading ? 'Loading…' : 'Apply'}
                </Button>
                <Button variant="outline-secondary" onClick={clearSnapshot} className="ms-1">
                  Clear
                </Button>
              </InputGroup>
            </Form>

            <Nav.Link className="theme-toggle-icon" title="Dark mode only">
              <FaSun color="#FFC72C" />
            </Nav.Link>
          </Nav>
        </Navbar>

        <Container fluid className="mt-4">
          {/* If snapshot active, show small label */}
          {snapshotLabel && (
            <div style={{ color: '#FFC72C', marginBottom: 8 }}>
              {snapshotLabel}
              {snapshotError && <span style={{ color: 'salmon', marginLeft: 10 }}>{snapshotError}</span>}
            </div>
          )}

          <Routes>
            <Route
              path="/"
              element={
                <DashboardHome
                  personnelSummary={activePersonnelSummary}
                  totalVisitedToday={activeTotalVisitedToday}
                  visitedToday={activeVisitedToday}
                  visitedOccupants={activeVisitedOccupants}         // <-- NEW prop
                  floorData={activeFloorData}
                  personnelBreakdown={activePersonnelBreakdown}
                  floorInOutSummary={activeFloorInOutSummary}
                  rejectionSnapshot={snapshotMode && snapshotData ? snapshotData.rejections || snapshotData.rejectionAllDetailsToday || [] : null}
                />
              }
            />

            <Route
              path="/floor-details"
              element={
                <FloorDetailsPage
                  floorData={activeFloorData}
                  floorInOutSummary={activeFloorInOutSummary}
                  visitedOccupants={activeVisitedOccupants}        // optional: pass if FloorDetails shows visitors
                />
              }
            />

            <Route
              path="/inout-inconsistency-denver"
              element={
                <DenverInOutInconsistencyPage
                  data={inOutData}
                  loading={loadingInOut}
                  error={inOutError}
                />
              }
            />
          </Routes>
        </Container>
      </div>
    </BrowserRouter>
  );
}




