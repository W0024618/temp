

// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;
  const filterCode = decodedPartition?.split('.')[0] || null;

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // 1) pick summary for the date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const ds = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r =>
      r.date === ds || r.date.startsWith(ds)
    ) || null;
  }, [data, pickedDate]);

  // 2) build partitionRows (unchanged)
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    const codeToCountry = {
      AR: 'Argentina',
      BR: 'Brazil',
      CR: 'Costa Rica',
      MX: 'Mexico',
      PA: 'Panama',
      PE: 'Peru'
    };
    return Object.entries(summaryEntry.partitions)
      .filter(([key]) =>
        !filterCode ? true : key.startsWith(filterCode + '.')
      )
      .map(([key, v]) => {
        const [code, cityRaw] = key.split('.');
        return {
          country: codeToCountry[code] || code,
          city: cityRaw.replace('Partition', '').trim(),
          employee: v.Employee ?? v.EmployeeCount ?? 0,
          contractor: v.Contractor ?? v.ContractorCount ?? 0,
          tempBadge: v.TempBadge ?? 0,
          total: v.total ?? 0,
        };
      });
  }, [summaryEntry, filterCode]);

  // 3) build detailRows exactly like APAC:
  const detailRows = useMemo(() => {
    if (!data || !pickedDate || !showDetails) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    // filter by date field (SwipeDate OR LocaleMessageTime) & partition
    const filtered = data.details.filter(r => {

      // const inDay = (r.SwipeDate && r.SwipeDate.startsWith(ds))
      //   || format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd') === ds;


      const inDay = (r.SwipeDate && r.SwipeDate.startsWith(ds))
        || (r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds); 

      const inPartition = !filterCode
        || r.PartitionName2.startsWith(filterCode + '.');
      return inDay && inPartition;
    });

    // sort oldest → newest
    // filtered.sort((a,b) =>
    //   new Date(a.LocaleMessageTime) - new Date(b.LocaleMessageTime)
    // );



    filtered.sort((a, b) =>
      (a.LocaleMessageTime || '').localeCompare(b.LocaleMessageTime || '')
    );



    // dedupe by PersonGUID, keep first
    const seen = new Set();
    return filtered.filter(r => {
      if (seen.has(r.PersonGUID)) return false;
      seen.add(r.PersonGUID);
      return true;
    });
  }, [data, pickedDate, showDetails, filterCode]);

  // fetch on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory()
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data) return null;

  // Export
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        // Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
         Date:
        (r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10)) ||
        (r.SwipeDate && r.SwipeDate.slice(0, 10)) ||
        '',
        Time: formatApiTime12(r.LocaleMessageTime),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        PersonnelType: r.PersonnelType,
        CardNumber: r.CardNumber,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  const isCostaRica = filterCode === 'CR';



  // Interpret the API ISO string as UTC text (no timezone conversion),
  // extract the HH:mm:ss and return 12-hour formatted "hh:mm:ss AM/PM".
  const formatApiTime12 = (iso) => {
    if (!iso || typeof iso !== 'string') return '';

    // Try to extract HH:mm:ss from ISO (handles "2025-09-01T00:15:57.000Z"
    // and also a few other common variants).
    const m = iso.match(/T?(\d{2}):(\d{2}):(\d{2})/);
    if (!m) return '';

    const hh = parseInt(m[1], 10);
    const mm = m[2];
    const ss = m[3];

    if (Number.isNaN(hh)) return `${m[1]}:${mm}:${ss}`;

    // convert to 12-hour
    let h12 = hh % 12;
    if (h12 === 0) h12 = 12;
    const ampm = hh >= 12 ? 'PM' : 'AM';

    return `${String(h12).padStart(2, '0')}:${mm}:${ss} ${ampm}`;
  };
  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px: 2, mb: 2, gap: 1 }}>
            {/* DatePicker */}
            <Box sx={{ width: 200 }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => { setPickedDate(d); setShowDetails(false); }}
                  renderInput={params => <TextField fullWidth {...params} />}
                />
              </LocalizationProvider>
            </Box>
            {/* Summary */}
            <Box sx={{ flex: 1, maxWidth: 900, display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Paper elevation={3} sx={{ px: 4, py: 3, border: '3px solid #000', borderRadius: 2 }}>
                <Table sx={{ border: '2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell colSpan={isCostaRica ? 6 : 5} align="center"
                        sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#fff', border: '2px solid #000' }}
                      >
                        {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor: '#FFC107' }}>
                      {[
                        'Country', 'City', 'Employee', 'Contractors',
                        ...(isCostaRica ? ['Temp Badge'] : []),
                        'Total'
                      ].map(h => (
                        <TableCell key={h}
                          align={['Country', 'City'].includes(h) ? 'left' : 'right'}
                          sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}
                        >{h}</TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {partitionRows.map((row, i) => (
                      <TableRow key={i}>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                        <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                        {isCostaRica && (
                          <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.tempBadge}</TableCell>
                        )}
                        <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
                          {row.total}
                        </TableCell>
                      </TableRow>
                    ))}
                    <TableRow sx={{ bgcolor: '#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.employee, 0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                      </TableCell>
                      {isCostaRica && (
                        <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                          {partitionRows.reduce((s, r) => s + r.tempBadge, 0)}
                        </TableCell>
                      )}
                      <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                        {partitionRows.reduce((s, r) => s + r.total, 0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>
              {/* Details toggle & export */}
              <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                <Button variant="contained" sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}>
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button variant="outlined" sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={handleExport}>
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          </Box>
        ) : (
          <Box sx={{ px: 2, mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d => { setPickedDate(d); setShowDetails(false); }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}

        {/* Details table */}
        {showDetails && (
          <Box display="flex" justifyContent="center" mb={2} sx={{ width: '100%' }}>
            <Paper elevation={1} sx={{ px: 4, py: 1, width: '100%', border: '3px solid #000', borderRadius: 2 }}>
              {detailRows.length > 0 ? (
                <Table sx={{ border: '2px solid #000', borderCollapse: 'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor: '#000' }}>
                      {[
                        'Sr', 'Date', 'Time',
                        'Employee ID', 'Name', 'Personnel Type',
                        'Card Number', 'Door', 'Partition'
                      ].map(h => (
                        <TableCell key={h} align="center"
                          sx={{ color: '#FFC107', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}
                        >{h}</TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {detailRows.map((r, i) => (
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                        {/*                         
                        <TableCell sx={{border:'2px solid #000'}}>
                          {format(new Date(r.LocaleMessageTime),'yyyy-MM-dd')}
                        </TableCell> */}

                        <TableCell sx={{ border: '2px solid #000' }}>
                          {(r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10)) || (r.SwipeDate && r.SwipeDate.slice(0, 10)) || ''}
                        </TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>
                          {formatApiTime12(r.LocaleMessageTime)}
                        </TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.CardNumber}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                        <TableCell sx={{ border: '2px solid #000' }}>{r.PartitionName2}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <Typography variant="body2" sx={{ color: '#666', textAlign: 'center', mt: 2, fontStyle: 'italic' }}>
                  No swipe records found for this date.
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Container>
      <Footer />
    </>
  );
}



























// src/pages/PartitionDetailDetails.jsx
import React, { useEffect, useState, useMemo } from "react";
import {
  Container, Box, Typography, Button, TextField,
  TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";

import Header from "../components/Header";
import Footer from "../components/Footer";
import LoadingSpinner from "../components/LoadingSpinner";
import DataTable from "../components/DataTable";

import { fetchLiveSummary } from "../api/occupancy.service";
import { lookupFloor } from "../utils/floorLookup";

export default function PartitionDetailDetails() {
  const { partition } = useParams();
  const navigate = useNavigate();

  const [loading, setLoading] = useState(true);
  const [details, setDetails] = useState([]);
  const [liveCounts, setLiveCounts] = useState({});
  const [lastUpdate, setLastUpdate] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedFloor, setExpandedFloor] = useState(null);

  // pull + poll
  useEffect(() => {
    let active = true;

    const load = async () => {
      let json;
      try {
        json = await fetchLiveSummary();
      } catch (err) {
        console.error("fetchLiveSummary error:", err);
        return;
      }
      if (!active) return;

      // --- 1) normalize & trim liveCounts keys ---
      const raw = json.realtime[partition]?.floors || {};
      const counts = Object.entries(raw).reduce((acc, [floor, count]) => {
        const f = floor.trim();
        acc[f] = (acc[f] || 0) + count;
        return acc;
      }, {});
      setLiveCounts(counts);

      // --- 2) grab all swipes (in+out) for this partition ---
      const all = json.details
        .filter(r =>
          r.PartitionName2 === partition &&
          (r.Direction === "InDirection" || r.Direction === "OutDirection")
        );

      // --- 3) sort oldest→newest & group to last swipe per user ---
      all.sort((a, b) =>
        new Date(a.LocaleMessageTime) - new Date(b.LocaleMessageTime)
      );
      const lastByPerson = {};
      all.forEach(r => { lastByPerson[r.PersonGUID] = r });

      // --- 4) keep only people whose **last** swipe is IN → currently inside ---
      const inside = Object.values(lastByPerson)
        .filter(r => r.Direction === "InDirection")
        .map(r => ({
          ...r,
          // 5) lookup & trim floor name
          floor: lookupFloor(r.PartitionName2, r.Door, r.Direction)
        }));

      setDetails(inside);
      setLastUpdate(new Date().toLocaleTimeString());
      setLoading(false);
    };

    load();
    const iv = setInterval(load, 1000);
    return () => { active = false; clearInterval(iv); };
  }, [partition]);

  // build a map: floorName → rows[]
  const floorMap = useMemo(() => {
    const m = {};
    // ensure every floor in liveCounts appears
    Object.keys(liveCounts).forEach(f => { m[f] = [] });
    details.forEach(r => {
      const f = r.floor;
      if (!m[f]) m[f] = [];
      m[f].push(r);
    });
    return m;
  }, [details, liveCounts]);

  // filter & sort floors by search + descending headcount
  const term = searchTerm.trim().toLowerCase();
  const displayed = useMemo(() => {
    return Object.entries(floorMap)
      .filter(([floor, emps]) => {
        if (!term) return true;
        if (floor.toLowerCase().includes(term)) return true;
        return emps.some(r =>
          String(r.EmployeeID).toLowerCase().includes(term) ||
          String(r.ObjectName1).toLowerCase().includes(term) ||
          String(r.CardNumber).toLowerCase().includes(term)
        );
      })
      .sort(([a], [b]) =>
        (liveCounts[b] || 0) - (liveCounts[a] || 0)
      );
  }, [floorMap, liveCounts, term]);

  const columns = [
    { field: "EmployeeID", headerName: "Emp ID" },
    { field: "ObjectName1", headerName: "Name" },
    { field: "LocaleMessageTime", headerName: "Swipe Time" },
    { field: "PersonnelType", headerName: "Type" },
    { field: "CardNumber", headerName: "Card" },
    { field: "Door", headerName: "Door" },
  ];

  // format API time string (HH:mm:ss from ISO) into 12h with AM/PM
  const formatApiTime12 = (iso, fallback) => {
    const raw = iso
      ? iso.slice(11, 19) // HH:mm:ss
      : (fallback || '');
    if (!raw) return '';

    // parse HH, mm, ss
    const [hh, mm, ss] = raw.split(':').map(Number);
    const hours12 = ((hh + 11) % 12) + 1; // convert to 1–12
    const ampm = hh >= 12 ? 'PM' : 'AM';
    return `${hours12.toString().padStart(2, '0')}:${mm
      .toString()
      .padStart(2, '0')}:${ss.toString().padStart(2, '0')} ${ampm}`;
  };






  return (
    <>
      <Header />
      <Box sx={{ pt: 1, pb: 1, background: 'rgba(0,0,0,0.6)' }}>
        <Container disableGutters maxWidth={false}>
          <Box display="flex" alignItems="center" mb={2} sx={{ px: 2 }}>
            <Button size="small" onClick={() => navigate(-1)} sx={{ color: '#FFC107' }}>
              ← Back to Overview
            </Button>
          </Box>
          <Box display="flex" alignItems="center" gap={2} mb={2} sx={{ px: 2 }}>
            <Typography variant="h6" sx={{ color: '#FFC107' }}>Floor Details</Typography>
            <Typography variant="body2" sx={{ color: '#FFC107' }}>
              Last updated: {lastUpdate}
            </Typography>
            <TextField
              size="small" placeholder="Search…" value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
              sx={{
                '& .MuiInputBase-input': { color: '#FFC107' },
                '& .MuiOutlinedInput-root fieldset': { borderColor: '#FFC107' }
              }}
            />
          </Box>
          {loading
            ? <Box sx={{ px: 2, py: 8 }}><LoadingSpinner /></Box>
            : (
              <>
                <Box display="flex" flexWrap="wrap" width="100%" sx={{ px: 2 }}>
                  {displayed.map(([floor, emps]) => {
                    const showAll = !!term;
                    const preview = showAll
                      ? emps.filter(r =>
                        String(r.EmployeeID).toLowerCase().includes(term) ||
                        String(r.ObjectName1).toLowerCase().includes(term) ||
                        String(r.CardNumber).toLowerCase().includes(term)
                      )
                      : emps.slice(0, 15);

                    return (
                      <Box key={floor} sx={{ width: '50%', p: 2 }}>
                        <Paper sx={{ border: '2px solid #FFC107', p: 2, background: 'rgba(0,0,0,0.4)' }}>
                          <Typography variant="subtitle1" fontWeight={600} sx={{ color: '#FFC107', mb: 1 }}>
                            {floor} (Total {liveCounts[floor] || 0})
                          </Typography>
                          <TableContainer component={Paper} variant="outlined" sx={{ mb: 1, background: 'rgba(0,0,0,0.4)' }}>
                            <Table size="small">
                              <TableHead>
                                <TableRow sx={{ bgcolor: '#000' }}>
                                  {columns.map(c => (
                                    <TableCell key={c.field}
                                      sx={{ color: '#FFC107', fontWeight: 'bold', border: '1px solid #FFC107' }}
                                    >
                                      {c.headerName}
                                    </TableCell>
                                  ))}
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {preview.map((r, i) => (
                                  <TableRow key={`${r.PersonGUID}-${i}`}
                                    sx={showAll ? { background: 'rgba(255,235,59,0.3)' } : {}}>
                                    <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.EmployeeID}</TableCell>
                                    <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.ObjectName1}</TableCell>


                                    <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>
                                      {formatApiTime12(r.LocaleMessageTime, r.Swipe_Time)}
                                    </TableCell>

                                    <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.PersonnelType}</TableCell>
                                    <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.CardNumber}</TableCell>
                                    <TableCell sx={{ color: '#fff', border: '1px solid #FFC107' }}>{r.Door}</TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          </TableContainer>
                          <Button size="small" sx={{ color: '#FFC107' }}
                            onClick={() => setExpandedFloor(f => f === floor ? null : floor)}>
                            {expandedFloor === floor ? 'Hide' : 'See more…'}
                          </Button>
                        </Paper>
                      </Box>
                    );
                  })}
                </Box>
                {expandedFloor && (
                  <Box sx={{ px: 2, mt: 2 }}>
                    <Typography variant="h6" sx={{ color: '#FFC107' }} gutterBottom>
                      {expandedFloor} — All Entries
                    </Typography>
                    <DataTable
                      columns={columns}
                      rows={(floorMap[expandedFloor] || []).map(r => ({
                        ...r,
                        LocaleMessageTime: formatApiTime12(r.LocaleMessageTime, r.Swipe_Time)
                      }))}
                    />
                  </Box>
                )}
              </>
            )
          }
        </Container>
      </Box>
      <Footer />
    </>
  );
}


