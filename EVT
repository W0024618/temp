http://localhost:5001/api/stats


{
  "TotalProfiles": 21030,
  "ActiveProfiles": 10186,
  "ActiveEmployees": 8643,
  "ActiveContractors": 669,
  "TerminatedProfiles": 10844,
  "TerminatedEmployees": 148,
  "TerminatedContractors": 143
}



check above API in details also check 
below file in details and update API endpomint like ..
If i want to check 
 "TotalProfiles": 21030,
Update API endpoint for Totalprofile Count and their detail information like 
[
  {
    "id": 2097208998,
    "EmpName": "-, Paulet Isabel",
    "EmployeeID": "328326",
    "PersonnelType": "Terminated Personnel",
    "Manager_Name": "Lisseth Guilarte de Araujo",
    "Manager_WU_ID": "0",
    "Profile_Disabled": true,
    "Total_Cards": 1,
    "Active_Cards": 1,
    "Employee_Status": "Deactive",
    "imageUrl": "/api/employees/2097208998/image"
  },
  {
    "id": 2097197204,
    "EmpName": "., Anushka",
    "EmployeeID": "319473",
    "PersonnelType": "Employee",
    "Manager_Name": "Rawat, Mayank",
    "Manager_WU_ID": "0",
    "Profile_Disabled": false,
    "Total_Cards": 1,
    "Active_Cards": 1,
    "Employee_Status": "Active",
    "imageUrl": "/api/employees/2097197204/image"
  },



if i want to check only  "ActiveProfiles and their Count and their details then update API endpoint only for this
So check below File line by line and fix this Carefully. Think long ..



// controllers/employeeController.js
const { getPool } = require('../config/db');

const getEmployees = async (req, res) => {
  console.log('🎯 [GET] /api/employees called');
  try {
    const pool = await getPool();
    console.log('✅ DB pool acquired');
    const result = await pool.request().query(`
      SELECT DISTINCT
        AP.ObjectID           AS EmployeeObjID,     
        AP.Name               AS "Emp Name",
        CASE AP.Int1
          WHEN 0 THEN AP.Text12
          ELSE CAST(AP.Int1 AS NVARCHAR)
        END                    AS "EmployeeID",
        PT.Name               AS "PersonnelType",
        AP.Text10             AS "Manager Name",
        AP.Int4               AS Manager_WU_ID,
        AI.Image              AS Image,
        AP.Disabled           AS Profile_Disabled,
        COUNT(ACR.Name)       AS Total_Cards,
        SUM(
          CASE
            WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
              AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
              AND (ACR.Lost IS NULL OR ACR.Lost = 0)
              AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
            THEN 1 ELSE 0
          END
        )                      AS Active_Cards,
        SUM(
          CASE
            WHEN ACR.ExpirationDateTime IS NOT NULL AND ACR.ExpirationDateTime < GETDATE()
            THEN 1 ELSE 0
          END
        )                      AS Expired_Cards,
        CASE
          WHEN AP.Disabled = 1 THEN 'Deactive'
          WHEN AP.Disabled = 0 THEN
            CASE
              WHEN SUM(
                CASE
                  WHEN (ACR.ExpirationDateTime IS NULL OR ACR.ExpirationDateTime >= GETDATE())
                    AND (ACR.Disabled IS NULL OR ACR.Disabled = 0)
                    AND (ACR.Lost IS NULL OR ACR.Lost = 0)
                    AND (ACR.Stolen IS NULL OR ACR.Stolen = 0)
                  THEN 1 ELSE 0
                END
              ) > 0 THEN 'Active'
              ELSE 'Deactive'
            END
          ELSE 'Deactive'
        END                    AS "Employee_Status"
      FROM ACVSCore.Access.Personnel AP
      INNER JOIN ACVSCore.Access.Credential    ACR ON AP.Name = ACR.Name
      INNER JOIN ACVSCore.Access.PersonnelType PT  ON PT.ObjectID = AP.PersonnelTypeID
      INNER JOIN ACVSCore.Access.Images        AI  ON AI.ParentId = AP.ObjectID
      GROUP BY
        AP.ObjectID,
        AP.Name,
        AP.Int1,
        AP.Text12,
        PT.Name,
        AP.Text10,
        AP.Int4,
        AI.Image,
        AP.Disabled
      ORDER BY AP.Name
    `);
    console.log('✅ Query executed, rows:', result.recordset.length);

    const employees = result.recordset.map(emp => ({
      id:               emp.EmployeeObjID,
      EmpName:          emp["Emp Name"],
      EmployeeID:       emp.EmployeeID,
      PersonnelType:    emp.PersonnelType,
      Manager_Name:     emp["Manager Name"],
      Manager_WU_ID:    emp.Manager_WU_ID,
      Profile_Disabled: emp.Profile_Disabled,
      Total_Cards:      emp.Total_Cards,
      Active_Cards:     emp.Active_Cards,
      Employee_Status:  emp.Employee_Status,
      imageUrl:         `/api/employees/${emp.EmployeeObjID}/image`
    }));

    return res.json(employees);
  } catch (err) {
    console.error('❌ Error in getEmployees:', err.stack || err);
    return res.status(500).json({
      error: 'Internal Server Error',
      message: err.message
    });
  }
};

module.exports = { getEmployees };
// ............................................


// At the end of controllers/employeeController.js
const getEmployeeStats = async (req, res) => {
  try {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT
        COUNT(*) AS TotalProfiles,
        SUM(CASE WHEN AP.Disabled = 0 THEN 1 ELSE 0 END) AS ActiveProfiles,
        SUM(CASE WHEN AP.Disabled = 0 AND PT.Name = 'Employee' THEN 1 ELSE 0 END) AS ActiveEmployees,
        SUM(CASE WHEN AP.Disabled = 0 AND PT.Name = 'Contractor' THEN 1 ELSE 0 END) AS ActiveContractors,
        SUM(CASE WHEN AP.Disabled = 1 THEN 1 ELSE 0 END) AS TerminatedProfiles,
        SUM(CASE WHEN AP.Disabled = 1 AND PT.Name = 'Employee' THEN 1 ELSE 0 END) AS TerminatedEmployees,
        SUM(CASE WHEN AP.Disabled = 1 AND PT.Name = 'Contractor' THEN 1 ELSE 0 END) AS TerminatedContractors
      FROM ACVSCore.Access.Personnel AP
      INNER JOIN ACVSCore.Access.PersonnelType PT ON PT.ObjectID = AP.PersonnelTypeID
    `);
    res.json(result.recordset[0]);
  } catch (err) {
    console.error('❌ getEmployeeStats error', err.stack || err);
    res.status(500).json({ error: 'Failed to get stats' });
  }
};

module.exports.getEmployeeStats = getEmployeeStats;







C:\Users\W0024618\Desktop\employee-verification\routes\employeeRoutes.js



const express = require('express');
const router  = express.Router();

const { getEmployees }     = require('../controllers/employeeController');
const { getEmployeeImage } = require('../controllers/employeeImageController');

const { getEmployeeStats } = require('../controllers/employeeController');


const { getEmployeeLiveLocation } = require('../controllers/employeeLocationController');
router.get('/employees/:id/location', getEmployeeLiveLocation);

// Metadata endpoint
router.get('/employees', getEmployees);

// Image stream endpoint
router.get('/employees/:id/image', getEmployeeImage);

// ... other routes
router.get('/stats', getEmployeeStats);

module.exports = router;










C:\Users\W0024618\Desktop\employee-verification\server.js

// server.js
const express = require('express');
const cors = require('cors');
require('dotenv').config();

const employeeRoutes = require('./routes/employeeRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// ✅ Correct route
app.use('/api', employeeRoutes);

const PORT = process.env.PORT || 5001;

app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
});


