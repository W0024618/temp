
// C:\Users\W0024618\Desktop\swipeData\client\src\components\SummaryChart.jsx
import React from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Cell,
  LabelList,
} from "recharts";
import { Card } from "react-bootstrap";
// Gradients/solid colors for known zones

const ZONE_GRADIENTS = {
  "Red Zone": ["#FF0000", "#D22B2B"],
  "Red Zone - Outer Area": ["#FF0000", "#D22B2B"],
  "Yellow Zone": ["#FFDE21", "#FFBF00"],
  "Yellow Zone - Outer Area": ["#FFDE21", "#FFBF00"],
  "Orange Zone": ["#E3963E", "#FFC966"],
  "Orange Zone - Outer Area": ["#E3963E", "#FFC966"],
  "Green Zone": ["#009E60", "#50C878"],
  "Reception Area": ["#E0CCFF", "#F4E6FF"],
  "Assembly Area": ["#FE6F5E", "#A366FF"],
  "Tower B": ["#E68FAC", "#99BBFF"],
  "2nd Floor, Pune": ["#FF6F61", "#FFA28F"],
};

const SOLID_COLORS = [
  "#FFD100",
  "#009E60",
  "#FF6F61",
  "#58595B",
  "#FFB800",
  "#C75D00",
];




export default function SummaryChart({ summary = [] }) {
  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  // ðŸ”¹ Sort zones by headcount (descending)
  const sortedData = [...summary].sort((a, b) => b.count - a.count);
  // Custom tooltip

  // const renderTooltip = ({ active, payload }) => {
  //   if (!active || !payload || !payload.length) return null;
  //   const { zone, count } = payload[0].payload;
  //   return (
  //     <div
  //       style={{
  //         backgroundColor: "#000",
  //         border: "1px solid var(--wu-yellow)",
  //         borderRadius: 4,
  //         padding: "8px",
  //         color: "#FFD100",
  //         fontSize: "0.9rem",
  //       }}
  //     >
  //       <div>
  //         <strong>{zone}</strong>
  //       </div>
  //       <div>Headcount: {count}</div>
  //     </div>
  //   );
  // };


  
const renderTooltip = ({ active, payload }) => {
  if (!active || !payload || !payload.length) return null;
  const { zone, count } = payload[0].payload;
  return (
    <div
      style={{
        backgroundColor: "#000",
        border: "1px solid var(--wu-yellow)",
        borderRadius: 4,
        padding: "8px",
        color: "#FFD100",
        fontSize: "0.9rem",
      }}
    >
      <div>
        <strong>{zone}</strong> {/* âœ… already mapped */}
      </div>
      <div>Headcount: {count}</div>
    </div>
  );
};




// ðŸ”¹ Helper: map special zone names to display-friendly ones
const mapZoneName = (name) => {
  if (name === "Red Zone - Outer Area") return "East Outdoor Area";
  if (name === "Orange Zone - Outer Area") return "West Outdoor Area";
  return name;
};

// ðŸ”¹ Shorten long zone names (after mapping)
const shortenName = (name) => {
  const mapped = mapZoneName(name);
  if (mapped.length > 18) {
    return mapped.split(" ").slice(0, 2).join(" ") + "..."; // take first 2 words
  }
  return mapped;
};





  

  return (
    <Card
      className="mb-4 shadow-sm border"
      style={{ borderColor: "var(--wu-yellow)" }}
    >
      <Card.Header
        className="bg-dark text-warning text-center fw-bold"
        style={{
          fontSize: "1.2rem",
          borderBottom: "2px solid var(--wu-yellow)",
        }}
      >
        Western Union - Pune Zone-wise Headcount
      </Card.Header>

      <Card.Body style={{ height: "50vh", backgroundColor: "#1a1a1a" }}>
        <ResponsiveContainer width="100%" height="100%">

          {/* <BarChart
            layout="vertical"
            data={sortedData.map((z) => ({
              ...z,
              shortZone: shortenName(z.zone),
            }))}
            margin={{ top: 20, right: 40, left: 60, bottom: 20 }}
          > */}


          <BarChart
  layout="vertical"
  data={sortedData.map((z) => ({
    ...z,
    zone: mapZoneName(z.zone), // âœ… use mapped name
    shortZone: shortenName(z.zone),
  }))}
  margin={{ top: 20, right: 40, left: 60, bottom: 20 }}
>





            <XAxis type="number" tick={{ fill: "#FFD100" }} />
            <YAxis
              dataKey="shortZone"
              type="category"
              tick={{ fill: "#FFD100", fontWeight: "bold" }}
              width={150}
            />
            <Tooltip content={renderTooltip} />

            <Bar dataKey="count" radius={[8, 8, 8, 8]} minPointSize={24}>
              {sortedData.map((entry, idx) => {
                const grad = ZONE_GRADIENTS[entry.zone];
                const color = grad
                  ? `url(#grad-${entry.zone.replace(/\s+/g, "-")})`
                  : SOLID_COLORS[idx % SOLID_COLORS.length];
                return <Cell key={`cell-${idx}`} fill={color} />;
              })}

              <LabelList
                dataKey="count"
                position="inside"
                style={{
                  fill: "#fff",
                  fontWeight: "bold",
                  fontSize: "0.9rem",
                }}
              />
            </Bar>

            <defs>
              {sortedData.map((entry) => {
                const grad = ZONE_GRADIENTS[entry.zone];
                if (!grad) return null;
                return (
                  <linearGradient
                    id={`grad-${entry.zone.replace(/\s+/g, "-")}`}
                    key={entry.zone}
                    x1="0"
                    y1="0"
                    x2="1"
                    y2="0"
                  >
                    <stop offset="0%" stopColor={grad[0]} />
                    <stop offset="100%" stopColor={grad[1]} />
                  </linearGradient>
                );
              })}
            </defs>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}
